ans <- filtered.cor(iris)
ans
test_data <- as.data.frame(list(V4 = c(0.4, 0, -1.5, -1.8, -2.1, -1.7, -2.2, -1.6), V3 = c(1.4, -0.4, 1, -1.1, 0.2, 1.6, 0, 0.6), V6 = c("m", "m", "m", "m", "m", "m", "m", "m"), V1 = c(-0.4, 0.5, -1, 0.5, 0.4, -1.1, 1.8, -1), V8 = c("g", "g", "g", "g", "g", "g", "g", "g"), V5 = c(-1.7, 0, 0.2, -1.9, -0.1, 1.3, 2.2, -0.4), V7 = c("m", "m", "m", "m", "m", "m", "m", "m"), V2 = c(0.4, -0.3, -0.5, -0.2, -0.1, -1.1, 0.2, -1.1)))
ans <- filtered.cor(test_data)
ans
filtered.cor <- function(x){
x <- x[,sapply(x, is.numeric)]
corrs <- vector()
for (i in 1:(ncol(x)-1)){
for (j in (i+1):ncol(x)){
corrs <- c(corrs, cor.test(x[, i], x[, j])$estimate)
abscorrs <- c(corrs, abs(cor.test(x[, i], x[, j])$estimate))
}
}
return(corrs[which.max(abscorrs)])
}
test_data <- as.data.frame(list(V4 = c(0.4, 0, -1.5, -1.8, -2.1, -1.7, -2.2, -1.6), V3 = c(1.4, -0.4, 1, -1.1, 0.2, 1.6, 0, 0.6), V6 = c("m", "m", "m", "m", "m", "m", "m", "m"), V1 = c(-0.4, 0.5, -1, 0.5, 0.4, -1.1, 1.8, -1), V8 = c("g", "g", "g", "g", "g", "g", "g", "g"), V5 = c(-1.7, 0, 0.2, -1.9, -0.1, 1.3, 2.2, -0.4), V7 = c("m", "m", "m", "m", "m", "m", "m", "m"), V2 = c(0.4, -0.3, -0.5, -0.2, -0.1, -1.1, 0.2, -1.1)))
ans <- filtered.cor(test_data)
ans
filtered.cor <- function(x){
x <- x[,sapply(x, is.numeric)]
corrs <- vector()
for (i in 1:(ncol(x)-1)){
for (j in (i+1):ncol(x)){
corrs <- c(corrs, cor.test(x[, i], x[, j])$estimate)
abscorrs <- c(corrs, abs(cor.test(x[, i], x[, j])$estimate))
}
}
return(corrs[which.max(abscorrs)])
}
ans <- filtered.cor(test_data)
ans
filtered.cor <- function(x){
x <- x[,sapply(x, is.numeric)]
corrs <- vector()
for (i in 1:(ncol(x)-1)){
for (j in (i+1):ncol(x)){
corrs <- c(corrs, cor.test(x[, i], x[, j])$estimate)
abscorrs <- c(abscorrs, abs(cor.test(x[, i], x[, j])$estimate))
}
}
return(corrs[which.max(abscorrs)])
}
ans <- filtered.cor(test_data)
ans
filtered.cor <- function(x){
x <- x[,sapply(x, is.numeric)]
corrs <- vector()
for (i in 1:(ncol(x)-1)){
for (j in (i+1):ncol(x)){
corrs <- c(corrs, cor.test(x[, i], x[, j])$estimate)
abscorrs <- c(abscorrs, abs(cor.test(x[, i], x[, j])$estimate))
}
}
return(corrs[which.max(abscorrs)])
}
ans <- filtered.cor(test_data)
filtered.cor <- function(x){
x <- x[,sapply(x, is.numeric)]
corrs <- vector()
abscorrs <- vector()
for (i in 1:(ncol(x)-1)){
for (j in (i+1):ncol(x)){
corrs <- c(corrs, cor.test(x[, i], x[, j])$estimate)
abscorrs <- c(abscorrs, abs(cor.test(x[, i], x[, j])$estimate))
}
}
return(corrs[which.max(abscorrs)])
}
ans <- filtered.cor(test_data)
ans
test_data  <- read.csv("https://stepik.org/media/attachments/course/129/test_data.csvï»¿")
test_data  <- read.csv("https://stepik.org/media/attachments/course/129/test_data.csv")
test_data
shapiro.test(test_data[,1])
shapiro.test(test_data[,1])$p.value
smart_cor <- function(x){
if (shapiro.test(x[,1]$p.value < 0.05 & shapiro.test(x[,2]$p.value < 0.05))){
return(cor.test(x[,1], x[,2], method = 'spearman')$estimate)
}
else {
return(cor.test(x[,1], x[,2])$estimate)
}
}
smart_cor(test_data)
smart_cor <- function(x){
if (shapiro.test(x[,1])$p.value < 0.05 & shapiro.test(x[,2])$p.value < 0.05)){
return(cor.test(x[,1], x[,2], method = 'spearman')$estimate)
}
else {
return(cor.test(x[,1], x[,2])$estimate)
}
}
smart_cor <- function(x){
if (shapiro.test(x[,1])$p.value < 0.05 & shapiro.test(x[,2])$p.value < 0.05){
return(cor.test(x[,1], x[,2], method = 'spearman')$estimate)
}
else {
return(cor.test(x[,1], x[,2])$estimate)
}
}
smart_cor(test_data)
test_data <- as.data.frame(list(col1 = c(1.6, 1.69, -0.53, 1.41, 1.39, -1.51, 0.48, -1.34, -0.98, -1.88, -1.67, -1.35, -1.44, 0.88, -1.33, 1.78, -1.51, 0.59, 1.48, -0.94, 1.5, -0.92, -0.21, -0.78, -1.24, 1.58, 1.19, -1.6, -1.57, -1.48), col2 = c(-1.67, -1.18, 0.23, -0.75, -0.69, -0.14, -1.21, 0.24, -0.37, -0.56, -1.91, -1.49, 1.28, -0.84, -0.47, 1.81, 0.75, -0.09, 0, -0.74, 0.61, 0.82, -1.32, -0.04, -2.44, -1.39, 1.06, -0.42, -0.94, -0.64)))
smart_cor(test_data)
shapiro.test(test_data[,1])$p.value
shapiro.test(test_data[,2])$p.value
smart_cor <- function(x){
if (shapiro.test(x[,1])$p.value < 0.05 | shapiro.test(x[,2])$p.value < 0.05){
return(cor.test(x[,1], x[,2], method = 'spearman')$estimate)
}
else {
return(cor.test(x[,1], x[,2])$estimate)
}
}
smart_cor(test_data)
df  <- mtcars
df_numeric  <- df[,c(1,3:7)]
fit  <- lm(mpg ~ hp, df)
fir
fit
summary(fit)
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
###
library(ggplot2)
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
df  <- mtcars
df_numeric  <- df[, c(1,3:7)]
pairs(df_numeric)
fitted_values_mpg  <- data.frame(mpg = df$mpg, fitted = fit$fitted.values )
cor(df_numeric)
fit  <- corr.test(df_numeric)
?corr.test()
library(psych)
?corr.test()
fit  <- corr.test(df_numeric)
fir
fit
fit$r
fit$p
fit$adjust
my_df  <- mtcars
my_df$cyl  <- factor(my_df$cyl, labels = c("four", "six", "eight"))
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
fitted_values_mpg  <- data.frame(mpg = df$mpg, fitted = fit$fitted.values )
fitted_values_mpg
str(fir)
str(fit)
?lm
my_df  <- mtcars
my_df$cyl  <- factor(my_df$cyl, labels = c("four", "six", "eight"))
fit  <- lm(mpg ~ cyl, my_df)
fitted_values_mpg  <- data.frame(mpg = df$mpg, fitted = fit$fitted.values )
fitted_values_mpg
ggplot(fitter_df, aes( mpg, fitted)) +
geom_point(size=5 )
fitted_values_mpg  <- data.frame(mpg = df$mpg, fitted = fit$fitted.values )
new_hp <- data.frame(hp = c(100, 150, 129, 300))
new_hp$mpg  <- predict(fit, new_hp)
predict(fit, new_hp)
new_hp$mpg  <- predict(fit, new_hp)
new_hp <- data.frame(hp = c(100, 150, 129, 300))
new_hp
new_hp$mpg  <- predict(fit, new_hp)
new_hp
new_hp$mpg  <- predict(fit, new_hp)
fit  <- lm(mpg ~ cyl, my_df)
new_hp$mpg  <- predict(fit, new_hp)
fit  <- lm(mpg ~ cyl, my_df)
fir
fit
summary(fit)
new_hp
predict(fit, new_hp)
fit  <- lm(mpg ~ hp, my_df)
new_hp
new_hp$mpg  <- predict(fit, new_hp)
new_hp
predict(fit, new_hp)
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
new_hp <- data.frame(hp = c(100, 150, 129, 300))
new_hp
new_hp$mpg  <- predict(fit, new_hp)
new_hp
predict(fit, new_hp)
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(df, aes(cyl, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face='bold)
')
)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face='bold')
)
my_df <- mtcars
fit  <- lm(mpg ~ cyl, my_df)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face='bold'))
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
str(mtcars)
my_df$cyl  <- factor(my_df$cyl, labels = c("four", "six", "eight"))
str(my_df)
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
aggregate(mpg ~ cyl, my_df, mean  )
?aggregate
summary(fit)
aggregate(mpg ~ cyl, my_df, mean)
#####
ttt <- read.table("dataset_11508_12.txt", sep = " ")
ttt
fit <- lm(V1 ~ V2, ttt)
summary(fir)
summary(fit)
fit$coefficients
str(diamonds)
fit_coef <- lm(price ~ depth, diamonds)$coefficients
fit_coef
fit_coef <- lm(price ~ depth, diamonds, subset = diamonds[cut==0.46])$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = diamonds[diamonds$cut==0.46])$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = diamonds[diamonds$cut=0.46])$coefficients
?lm
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=0.46))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (cut='ideal'))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=ideal))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=='ideal''))$coefficients
fit_coef
?lm
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=='ideal''))$coefficients
fit_coef
?lm
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=='ideal'))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (carat==0.46))$coefficients
fit_coef
fit_coef <- lm(price ~ depth, diamonds, subset = (carat=0.46))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (carat==0.46 & cut=="ideal"))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (carat==0.46 & cut=="Ideal"))$coefficients
fit_coef
df_y <- iris[,c(1,4)]
df_n <- iris[,1:2]
df_y
df_n
df_y
df_y[1]
df_y[2]
df_y
lm(df[1] ~ df[2], df)$p.value
lm(df_y[1] ~ df_y[2], df_y)$p.value
df_y
df_y[1]
df_y[,1]
lm(df_y[,1] ~ df_y[,2], df_y)$p.value
lm(df_y[,1] ~ df_y[,2], df_y)
ttt <- lm(df_y[,1] ~ df_y[,2], df_y)
str(ttt)
ttt
summary(ttt)
ttt
ttt
str(ttt)
?lm
summary(ttt)
ttt$coefficients
ttt$residuals
ttt$effects
ttt$rank
ttt$df.residual
ttt$call
ttt$terms
summary(ttt)
summary(ttt)$coefficients
summary(ttt)$coefficients[,4]
summary(ttt)$coefficients[2,4]
summary(ttt)$coefficients[2,4]
regr.calc(df){
ifelse((lm(df[1] ~ df[2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df){
lm(df[,1] ~ df[,2], df)$coefficients[2,4]
}
ttt <- lm(df_y[,1] ~ df_y[,2], df_y)
regr.calc(df){
lm(df[,1] ~ df[,2], df)$coefficients[2,4]
}
regr.calc(df){
lm(df[,1] ~ df[,2], df)
}
regr.calc(df){
lm(df[,1] ~ df[,2], df)
}
regr.calc(f){
lm(f[,1] ~ f[,2], f)
}
regr.calc <- function(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,2]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,1]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[1]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[2]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,]
}
regr.calc(df_y)
regr.calc <- function(f){
summary(lm(f[,1] ~ f[,2], f))$coefficients[,]
}
regr.calc(df_y)
regr.calc <- function(f){
summary(lm(f[,1] ~ f[,2], f))$coefficients[2,4]
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc(df_n)
df_yy <- df_y
df_yy$fit <- [1]
df_yy$fit <- 1
df_yy$fit <- 1
df_yy
lm(df[,1] ~ df[,2], df))
lm(df_y[,1] ~ df_y[,2], df_y))
lm(df_y[,1] ~ df_y[,2], df_y)
summary(ttt)
ttt$fitted.values
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, return(df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values),
print("There is no sense in prediction"))
}
regr.calc(df_y)
vvv <- regr.calc(df_y)
vvv
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
return(df)
}
regr.calc(df_y)
regr.calc(df_n)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values, return(df),
print("There is no sense in prediction"))
}
regr.calc(df_n)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
}
regr.calc(df_n)
regr.calc(df_y)
egr.calc <- function(df){
#  ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
#         print("There is no sense in prediction"))
if (summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05){
df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values
return(df)
}
else{
print("There is no sense in prediction")
}
}
regr.calc(df_y)
vvv <- regr.calc(df_y)
vvv
str(vvv)
vvv <- regr.calc(df_y)
str(vvv)
vvv <- regr.calc(df_y)
vvv
df_yy
df_y
df_y
df_y <- iris[,c(1,4)]
df_n <- iris[,1:2]
regr.calc <- function(df){
#  ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
#         print("There is no sense in prediction"))
if (summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05){
df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values
return(df)
}
else{
print("There is no sense in prediction")
}
}
df_yy <- df_y
regr.calc(df_y)
regr.calc(df_n)
my_df <- mtcars
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point()
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm")
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
df <- mtcars
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(.~Species)
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm") +
facet(.~Species)
ggplot(iris, aes(Sepal.Width, Petal.Width, col = Species))+
geom_point() +
geom_smooth(method = "lm")
