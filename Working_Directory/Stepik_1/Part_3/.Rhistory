}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,2]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,1]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[1]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[2]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,]
}
regr.calc(df_y)
regr.calc <- function(f){
summary(lm(f[,1] ~ f[,2], f))$coefficients[,]
}
regr.calc(df_y)
regr.calc <- function(f){
summary(lm(f[,1] ~ f[,2], f))$coefficients[2,4]
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc(df_n)
df_yy <- df_y
df_yy$fit <- [1]
df_yy$fit <- 1
df_yy$fit <- 1
df_yy
lm(df[,1] ~ df[,2], df))
lm(df_y[,1] ~ df_y[,2], df_y))
lm(df_y[,1] ~ df_y[,2], df_y)
summary(ttt)
ttt$fitted.values
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, return(df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values),
print("There is no sense in prediction"))
}
regr.calc(df_y)
vvv <- regr.calc(df_y)
vvv
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
return(df)
}
regr.calc(df_y)
regr.calc(df_n)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values, return(df),
print("There is no sense in prediction"))
}
regr.calc(df_n)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
}
regr.calc(df_n)
regr.calc(df_y)
egr.calc <- function(df){
#  ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
#         print("There is no sense in prediction"))
if (summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05){
df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values
return(df)
}
else{
print("There is no sense in prediction")
}
}
regr.calc(df_y)
vvv <- regr.calc(df_y)
vvv
str(vvv)
vvv <- regr.calc(df_y)
str(vvv)
vvv <- regr.calc(df_y)
vvv
df_yy
df_y
df_y
df_y <- iris[,c(1,4)]
df_n <- iris[,1:2]
regr.calc <- function(df){
#  ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
#         print("There is no sense in prediction"))
if (summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05){
df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values
return(df)
}
else{
print("There is no sense in prediction")
}
}
df_yy <- df_y
regr.calc(df_y)
regr.calc(df_n)
my_df <- mtcars
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point()
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm")
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
df <- mtcars
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(.~Species)
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm") +
facet(.~Species)
ggplot(iris, aes(Sepal.Width, Petal.Width, col = Species))+
geom_point() +
geom_smooth(method = "lm")
?swiss
str(swiss)
hist(swiss$Fertility, col = 'red')
fit <- lm(Fertility ~ Examination + Catholic, data = swiss)
summary(fit)
fit <- lm(Fertility ~ Examination + Catholic, data = swiss)
summary(fit)
fit2 <- lm(Fertility ~ Examination*Catholic, data = swiss)
summary(fit2)
ggplot(swiss, aes(x = Catholic, y = Fertility)) +
geom_point() + geom_smooth(method = 'lm')
library(ggplot1)
library(ggplot2)
ggplot(swiss, aes(x = Catholic, y = Fertility)) +
geom_point() + geom_smooth(method = 'lm')
###
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv"ï»¿)
###
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
test_data
str(test_data)
fit_test <- lm(y ~ x_1*x_2)
fit_test <- lm(y ~ x_1*x_2, test_data)
ggplot(test_data, aes(x = x_1, y = y)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(test_data, aes(x = x_2, y = y)) +
geom_point() + geom_smooth(method = 'lm')
test_data
fit_test <- lm(y ~ x_1*x_2, test_data)
summary(fit_test)
confint(fit_test)
predict(object = test_data, fit)
ggplot(swiss, aes(x = Catholic, y = Fertility)) +
/
predict(test_data)
predict(test_data, fit_test)
predict(fit_test)
test_data
predict(fit_test, test_data)
fit_test
test_data
test_data[1]
test_data[2]
test_data[3]
fit_test <- lm(y ~ x[1*x[2], test_data)
fit_test <- lm(y ~ x[1]*x[2], test_data)
fit_test <- lm(y ~ test_data[1]*test_data[2], test_data)
fit_test <- lm(y ~ x_1*x_2, test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[1]*x[2], x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
}
fill_na(test_data)
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
return(fit_test)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
x$y_full[!is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
#  x$y_full[!is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
#  x$y_full <- y_full
x$y_full[!is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
#  x$y_full <- y_full
x$y_full[is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
#  x$y_full <- y_full
x$y_full[is.na(x[,3])] <- x[,1]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
x$y_full[is.na(x$y)] <- x$y[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- x$y[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[!is.na(x$y)] <- x$y[!is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- x$y_full[is.na(x$y)]
return(x)
}
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
test_data <- as.data.frame(list(x_1 = c(10, 8, 11, 8, 10, 9, 9, 11, 11, 7),
x_2 = c(33, 43, 40, 27, 30, 31, 26, 37, 39, 26), y = c(13, 12, 17, 18, 10, NA, NA, 5, 10, 14)))
test_data
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1 + x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
library(PerformanceAnalytics)
test_data[1]
install.packages(PerformanceAnalytics)
df <- mtcars
str(df)
df
df <- mtcars[,c(1, 2, 3, 4, 5, 6)]
str(df)
df <- mtcars[,c(1, 3, 4, 5, 6)]
str(df)
fit_test <- lm(wt ~ mpg + disp + drat + hp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp + hp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp + hp, df)
summary(fit_test)
?attitude
str(attitude)
summary(lm(rating ~ complaints + critical), attitude)
summary(lm(rating ~ complaints + critical), attitude)
summary(lm(rating ~ complaints + critical, attitude))
summary(lm(rating ~ complaints * critical, attitude))
confint(lm(rating ~ complaints * critical, attitude))
hist(swiss$Catholic, col = 'red')
###
# categorical predictors
swiss
###
# categorical predictors
str(swiss)
###
# categorical predictors
?swiss
swiss$religious <- ifelse(swiss$Catholic > 60, 'Lots', 'Few')
swiss$religious <- as.factor(swiss$religious)
###
# categorical predictors
str(swiss)
swiss
fit3 <- lm(Fertility ~ Examination + religious, data = swiss)
summary(fit3)
confint(fir3)
confint(fit3)
###
# categorical predictors
str(swiss)
swiss
hist(swiss$Catholic, col = 'red')
swiss$religious <- ifelse(swiss$Catholic > 60, 'Lots', 'Few')
swiss$religious <- as.factor(swiss$religious)
fit3 <- lm(Fertility ~ Examination + religious, data = swiss)
summary(fit3)
fit4 <- lm(Fertility ~ Examination*religious, data = swiss)
fit4 <- lm(Fertility ~ religious*Examination, data = swiss)
summary(fit4)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()
library(ggplot1)
library(ggplot2)
library(ggplot3)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()  +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()  +
geom_smooth(method = 'lm')
dfmtc <- mtcars
dfmtc$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
#####
dfmtc <- mtcars
dfmtc$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
fit <- lm(mpg ~ wt*am, dfmt)
fit <- lm(mpg ~ wt*am, dfmtc)
summary(dfmtc)
summary(fit)
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg) +
geom_smooth(method = 'lm')
/
wd
s
2
ggplot(dfmtc, aes(x = wt, y = mpg)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
summary(fit)
mtcars$wt_centered <- mtcars$wt - mean(mtcars$wt)
dfmtc$wt_centered <- mtcars$wt - mean(mtcars$wt)
fit <- lm(mpg ~ wt_centered*am, dfmtc)
summary(fit)
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
?rm
rm(swiss)
str(swiss)
swiss <- data.frame(swiss)
str(swiss)
fit_full <- lm(Fertility ~ ., data = swiss)
summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
fit_full <- lm(Fertility ~ ., data = swiss)
summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
summary(fit_reduced1)
?anova
?step
?attitude
#####
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
ideal_model <- step(model_full, direction = 'backward')
summary(ideal_model)
ideal_model <- step(model_full, direction = 'backward', scope = scope)
summary(ideal_model)
model <- step(model_full, direction = 'backward', scope = scope)
summary(model)
model <- lm(rating ~ ., data = attitude)
ste <- step(model_full, direction = 'backward', scope = scope)
ste <- step(model_full, direction = 'backward')
#####
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
ideal_model <- step(model_full, direction = 'backward', scope = scope)
anova(model_full, ideal_model)
?LifeCycleSavings
swiss
pairs(swiss)
plot(swiss)
plot(swiss)
pairs(swiss)
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Education, y = Examination)) +
geom_point()
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, + 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector)
)
shapiro.test(log(my_vector))
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector))
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector))
shapiro.test(log(my_vector))
install.packages("QuantPsyc")
