ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
new_hp <- data.frame(hp = c(100, 150, 129, 300))
new_hp
new_hp$mpg  <- predict(fit, new_hp)
new_hp
predict(fit, new_hp)
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(df, aes(cyl, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face='bold)
')
)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face='bold')
)
my_df <- mtcars
fit  <- lm(mpg ~ cyl, my_df)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=25),
axis.title = element_text(size=25, face='bold'))
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
str(mtcars)
my_df$cyl  <- factor(my_df$cyl, labels = c("four", "six", "eight"))
str(my_df)
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
aggregate(mpg ~ cyl, my_df, mean  )
?aggregate
summary(fit)
aggregate(mpg ~ cyl, my_df, mean)
#####
ttt <- read.table("dataset_11508_12.txt", sep = " ")
ttt
fit <- lm(V1 ~ V2, ttt)
summary(fir)
summary(fit)
fit$coefficients
str(diamonds)
fit_coef <- lm(price ~ depth, diamonds)$coefficients
fit_coef
fit_coef <- lm(price ~ depth, diamonds, subset = diamonds[cut==0.46])$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = diamonds[diamonds$cut==0.46])$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = diamonds[diamonds$cut=0.46])$coefficients
?lm
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=0.46))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (cut='ideal'))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=ideal))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=='ideal''))$coefficients
fit_coef
?lm
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=='ideal''))$coefficients
fit_coef
?lm
fit_coef <- lm(price ~ depth, diamonds, subset = (cut=='ideal'))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (carat==0.46))$coefficients
fit_coef
fit_coef <- lm(price ~ depth, diamonds, subset = (carat=0.46))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (carat==0.46 & cut=="ideal"))$coefficients
fit_coef <- lm(price ~ depth, diamonds, subset = (carat==0.46 & cut=="Ideal"))$coefficients
fit_coef
df_y <- iris[,c(1,4)]
df_n <- iris[,1:2]
df_y
df_n
df_y
df_y[1]
df_y[2]
df_y
lm(df[1] ~ df[2], df)$p.value
lm(df_y[1] ~ df_y[2], df_y)$p.value
df_y
df_y[1]
df_y[,1]
lm(df_y[,1] ~ df_y[,2], df_y)$p.value
lm(df_y[,1] ~ df_y[,2], df_y)
ttt <- lm(df_y[,1] ~ df_y[,2], df_y)
str(ttt)
ttt
summary(ttt)
ttt
ttt
str(ttt)
?lm
summary(ttt)
ttt$coefficients
ttt$residuals
ttt$effects
ttt$rank
ttt$df.residual
ttt$call
ttt$terms
summary(ttt)
summary(ttt)$coefficients
summary(ttt)$coefficients[,4]
summary(ttt)$coefficients[2,4]
summary(ttt)$coefficients[2,4]
regr.calc(df){
ifelse((lm(df[1] ~ df[2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df){
lm(df[,1] ~ df[,2], df)$coefficients[2,4]
}
ttt <- lm(df_y[,1] ~ df_y[,2], df_y)
regr.calc(df){
lm(df[,1] ~ df[,2], df)$coefficients[2,4]
}
regr.calc(df){
lm(df[,1] ~ df[,2], df)
}
regr.calc(df){
lm(df[,1] ~ df[,2], df)
}
regr.calc(f){
lm(f[,1] ~ f[,2], f)
}
regr.calc <- function(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse((lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,2]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,1]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[1]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[2]
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients
}
regr.calc(df_y)
regr.calc <- function(f){
lm(f[,1] ~ f[,2], f)$coefficients[,]
}
regr.calc(df_y)
regr.calc <- function(f){
summary(lm(f[,1] ~ f[,2], f))$coefficients[,]
}
regr.calc(df_y)
regr.calc <- function(f){
summary(lm(f[,1] ~ f[,2], f))$coefficients[2,4]
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df)$coefficients[2,4] < 0.05), print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, print("Y"), print("N"))
}
regr.calc(df_y)
regr.calc(df_n)
df_yy <- df_y
df_yy$fit <- [1]
df_yy$fit <- 1
df_yy$fit <- 1
df_yy
lm(df[,1] ~ df[,2], df))
lm(df_y[,1] ~ df_y[,2], df_y))
lm(df_y[,1] ~ df_y[,2], df_y)
summary(ttt)
ttt$fitted.values
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
}
regr.calc(df_y)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, return(df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values),
print("There is no sense in prediction"))
}
regr.calc(df_y)
vvv <- regr.calc(df_y)
vvv
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
return(df)
}
regr.calc(df_y)
regr.calc(df_n)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values, return(df),
print("There is no sense in prediction"))
}
regr.calc(df_n)
regr.calc <- function(df){
ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
print("There is no sense in prediction"))
}
regr.calc(df_n)
regr.calc(df_y)
egr.calc <- function(df){
#  ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
#         print("There is no sense in prediction"))
if (summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05){
df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values
return(df)
}
else{
print("There is no sense in prediction")
}
}
regr.calc(df_y)
vvv <- regr.calc(df_y)
vvv
str(vvv)
vvv <- regr.calc(df_y)
str(vvv)
vvv <- regr.calc(df_y)
vvv
df_yy
df_y
df_y
df_y <- iris[,c(1,4)]
df_n <- iris[,1:2]
regr.calc <- function(df){
#  ifelse(summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05, df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values,
#         print("There is no sense in prediction"))
if (summary(lm(df[,1] ~ df[,2], df))$coefficients[2,4] < 0.05){
df$fit <- lm(df[,1] ~ df[,2], df)$fitted.values
return(df)
}
else{
print("There is no sense in prediction")
}
}
df_yy <- df_y
regr.calc(df_y)
regr.calc(df_n)
my_df <- mtcars
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
ggplot(my_df, aes(cyl, mpg))+
geom_point()+
geom_smooth(method = "lm")+
theme(axis.text = element_text(size=15),
axis.title = element_text(size=15, face='bold'))
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point()
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm")
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
df <- mtcars
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(.~Species)
ggplot(iris, aes(Sepal.Width, Petal.Width))+
geom_point() +
geom_smooth(method = "lm") +
facet(.~Species)
ggplot(iris, aes(Sepal.Width, Petal.Width, col = Species))+
geom_point() +
geom_smooth(method = "lm")
?swiss
str(swiss)
hist(swiss$Fertility, col = 'red')
fit <- lm(Fertility ~ Examination + Catholic, data = swiss)
summary(fit)
fit <- lm(Fertility ~ Examination + Catholic, data = swiss)
summary(fit)
fit2 <- lm(Fertility ~ Examination*Catholic, data = swiss)
summary(fit2)
ggplot(swiss, aes(x = Catholic, y = Fertility)) +
geom_point() + geom_smooth(method = 'lm')
library(ggplot1)
library(ggplot2)
ggplot(swiss, aes(x = Catholic, y = Fertility)) +
geom_point() + geom_smooth(method = 'lm')
###
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv"ï»¿)
###
test_data <- read.csv("https://stepic.org/media/attachments/course/129/fill_na_test.csv")
test_data
str(test_data)
fit_test <- lm(y ~ x_1*x_2)
fit_test <- lm(y ~ x_1*x_2, test_data)
ggplot(test_data, aes(x = x_1, y = y)) +
geom_point() + geom_smooth(method = 'lm')
ggplot(test_data, aes(x = x_2, y = y)) +
geom_point() + geom_smooth(method = 'lm')
test_data
fit_test <- lm(y ~ x_1*x_2, test_data)
summary(fit_test)
confint(fit_test)
predict(object = test_data, fit)
ggplot(swiss, aes(x = Catholic, y = Fertility)) +
/
predict(test_data)
predict(test_data, fit_test)
predict(fit_test)
test_data
predict(fit_test, test_data)
fit_test
test_data
test_data[1]
test_data[2]
test_data[3]
fit_test <- lm(y ~ x[1*x[2], test_data)
fit_test <- lm(y ~ x[1]*x[2], test_data)
fit_test <- lm(y ~ test_data[1]*test_data[2], test_data)
fit_test <- lm(y ~ x_1*x_2, test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[1]*x[2], x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
}
fill_na(test_data)
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
return(fit_test)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
x$y_full[!is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
#  x$y_full[!is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
#  x$y_full <- y_full
x$y_full[!is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
#  x$y_full <- y_full
x$y_full[is.na(x[,3])] <- x[,3]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x[,1]*x[,2], x)
y_full <- predict(fit_test, x)
#  x$y_full <- y_full
x$y_full[is.na(x[,3])] <- x[,1]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- y_full
x$y_full[is.na(x$y)] <- x$y[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- x$y[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[!is.na(x$y)] <- x$y[!is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- x$y_full[is.na(x$y)]
return(x)
}
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
test_data <- as.data.frame(list(x_1 = c(10, 8, 11, 8, 10, 9, 9, 11, 11, 7),
x_2 = c(33, 43, 40, 27, 30, 31, 26, 37, 39, 26), y = c(13, 12, 17, 18, 10, NA, NA, 5, 10, 14)))
test_data
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1 + x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
library(PerformanceAnalytics)
test_data[1]
install.packages(PerformanceAnalytics)
df <- mtcars
str(df)
df
df <- mtcars[,c(1, 2, 3, 4, 5, 6)]
str(df)
df <- mtcars[,c(1, 3, 4, 5, 6)]
str(df)
fit_test <- lm(wt ~ mpg + disp + drat + hp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp + hp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp + hp, df)
summary(fit_test)
?attitude
str(attitude)
summary(lm(rating ~ complaints + critical), attitude)
summary(lm(rating ~ complaints + critical), attitude)
summary(lm(rating ~ complaints + critical, attitude))
summary(lm(rating ~ complaints * critical, attitude))
confint(lm(rating ~ complaints * critical, attitude))
