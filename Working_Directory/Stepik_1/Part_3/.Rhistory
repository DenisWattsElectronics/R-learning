shap <- shapiro.test(re)
ggplot(re, aes(x = resid)) +
geom_histogram(binwidth = 1, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
re <- fit$resid
re$resid <- fit$resid
shap <- shapiro.test(re)
ggplot(re, aes(x = re)) +
geom_histogram(binwidth = 1, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
re <- fit$resid
re$resid <- fit$resid
#  shap <- shapiro.test(re)
ggplot(re, aes(x = re)) +
geom_histogram(binwidth = 1, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)
ggplot(fit, aes(x = resid)) +
geom_histogram(binwidth = 1, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 1, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 0.5, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)
return(shap)
#ifelse()
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 0.5, fill = 'red')
}
resid.norm(fits)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)$p.value
return(shap)
#ifelse()
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 0.5, fill = 'red')
}
resid.norm(fits)
fits <- lm(mpg ~ disp, mtcars)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)$p.value
ifelse(shap < 0.05, color <- 'red', color <- 'green')
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 0.5, fill = color)
}
resid.norm(fits)
fit <- lm(mpg ~ wt, mtcars)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)$p.value
ifelse(shap < 0.05, color <- 'red', color <- 'green')
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 0.5, fill = color)
}
resid.norm(fits)
resid.norm(fits)
fit <- lm(mpg ~ wt, mtcars)
resid.norm  <- function(fit){
shap <- shapiro.test(fit$resid)$p.value
ifelse(shap < 0.05, color <- 'red', color <- 'green')
ggplot(fit, aes(x = fit$resid)) +
geom_histogram(binwidth = 0.5, fill = color)
}
resid.norm(fits)
resid.norm(fit)
?hard.corr
#---
x1 <- rnorm(30) # создадим случайную выборку
x2 <- rnorm(30) # создадим случайную выборку
x3  <- x1 + 5 # теперь коэффициент корреляции x1 и x3 равен единице
my_df <- data.frame(var1 = x1, var2 = x2, var3 = x3)
high.corr(my_df)
high.corr <- function(x){
}
high.corr(my_df)
cor(my_df)
pairs(my_df)
ccc <- cor(my_df)
str(ccc)
?diag
diag(ccc)
ccc
diag(ccc)
ccc
diag(ccc) <-0
ccc
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
round(co)
}
high.corr(my_df)
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
round(co, digits = 3)
}
high.corr(my_df)
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
round(co, digits = 3)
return(co)
}
high.corr(my_df)
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
co <- round(co, digits = 3)
return(co)
}
high.corr(my_df)
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
co <- abs(round(co, digits = 3))
return(co)
}
high.corr(my_df)
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
co <- abs(round(co, digits = 3))
return(which(co == max(co), arr.ind = TRUE))
}
high.corr(my_df)
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
co <- abs(round(co, digits = 3))
return(which(co == max(co), arr.ind = F))
}
high.corr(my_df)
co
my_df
co <- cor(my_df)
diag(co) <- 0
co <- abs(round(co, digits = 3))
max_item <- which(co == max(co), arr.ind = F)
co
colnames(co)
colnames(co)[max_item[1]]
max_item <- which(co == max(co), arr.ind = F)
max_item
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
co <- abs(round(co, digits = 3))
max_item <- which(co == max(co), arr.ind = F)
return(c(colnames(co)[max_item[1]], rownames(co)[max_item[2]]))
}
high.corr(my_df)
max_item
rownames(co)[max_item[1]]
co
max_item
max_item <- which(co == max(co), arr.ind = F)
max_item
co
max_item <- which(co == max(co), arr.ind = T)
co
max_item <- which(co == max(co), arr.ind = T)
max_item
colnames(co)[max_item[1]]
rownames(co)[max_item[2]]
high.corr <- function(x){
co <- cor(my_df)
diag(co) <- 0
co <- abs(round(co, digits = 3))
max_item <- which(co == max(co), arr.ind = T)
return(c(colnames(co)[max_item[1]], rownames(co)[max_item[2]]))
}
high.corr(my_df)
getwd()
ls
ls -la
library(ROCR)
install.packages(ROCR)
install.packages('ROCR')
library(ROCR)
pred_fit <- prediction(my_df$prob, my_df$hon)
library(ggplot2)
my_df <- read.csv("train.csv", sep=";")
my_df <- read.csv("train.csv", sep=";")
str(my_df)
ggplot(my_df, aes(read, math, col = gender))+
geom_point(size = 5)+
facet_grid(.~hon)+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
ggplot(my_df, aes(read, math, col = gender))+
geom_point(size = 5)+
facet_grid(.~hon)+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
fit  <- glm(hon ~ read + math + gender, my_df, family = "binomial")
summary(fit)
exp(fit$coefficients)
head(predict(object = fit))
head(predict(object = fit, type = "response"))
my_df$prob  <- predict(object = fit, type = "response")
?predict
pred_fit <- prediction(my_df$prob, my_df$hon)
perf_fit <- performance(pred_fit,"tpr","fpr")
plot(perf_fit, colorize=T , print.cutoffs.at = seq(0,1,by=0.1))
my_df <- read.csv("train.csv", sep=";")
str(my_df)
ggplot(my_df, aes(read, math, col = gender))+
geom_point(size = 5)+
facet_grid(.~hon)+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
fit  <- glm(hon ~ read + math + gender, my_df, family = "binomial")
summary(fit)
exp(fit$coefficients)
head(predict(object = fit))
head(predict(object = fit, type = "response"))
my_df$prob  <- predict(object = fit, type = "response")
library(ROCR)
pred_fit <- prediction(my_df$prob, my_df$hon)
perf_fit <- performance(pred_fit,"tpr","fpr")
plot(perf_fit, colorize=T , print.cutoffs.at = seq(0,1,by=0.1))
plot(perf_fit, colorize=T , print.cutoffs.at = seq(0,1,by=0.1))
auc  <- performance(pred_fit, measure = "auc")
str(auc)
auc  <- performance(pred_fit, measure = "auc")
str(auc)
auc  <- performance(pred_fit, measure = "auc")
str(auc)
perf3  <- performance(pred_fit, x.measure = "cutoff", measure = "spec")
perf4  <- performance(pred_fit, x.measure = "cutoff", measure = "sens")
perf5  <- performance(pred_fit, x.measure = "cutoff", measure = "acc")
plot(perf3, col = "red", lwd =2)
plot(add=T, perf4 , col = "green", lwd =2)
plot(add=T, perf5, lwd =2)
legend(x = 0.6,y = 0.3, c("spec", "sens", "accur"),
lty = 1, col =c('red', 'green', 'black'), bty = 'n', cex = 1, lwd = 2)
abline(v= 0.225, lwd = 2)
my_df$pred_resp  <- factor(ifelse(my_df$prob > 0.225, 1, 0), labels = c("N", "Y"))
my_df$correct  <- ifelse(my_df$pred_resp == my_df$hon, 1, 0)
ggplot(my_df, aes(prob, fill = factor(correct)))+
geom_dotplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
ggplot(my_df, aes(prob, fill = factor(correct)))+
geom_dotplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
mean(my_df$correct)
test_df  <- read.csv("test.csv", sep = ";")
test_df$hon  <- NA
test_df$hon  <- predict(fit, newdata = test_df, type = "response")
View(test_df)
"binomial"
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, my_df)
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, my_df, family = "binomial")
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, my_df, family = "binomial")
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars)
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars)
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")$coefficients
summary(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
summary(fit)
str(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
str(fit)
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")
str(fit)
summary(fit)
fit$coefficients
fit  <- glm(am ~ disp + vs + mpg, mtcars, family = "binomial")$coefficients
library("ggplot2")
obj <- ggplot(data = ToothGrowth, aes())
ggplot(data = ToothGrowth, aes())
ggplot(my_df, aes(prob, fill = factor(correct)))+
geom_dotplot()+
theme(axis.text=element_text(size=25),
axis.title=element_text(size=25,face="bold"))
ggplot(ToothGrowth, aes(factor(dose))) +
boxplot()
ggplot(ToothGrowth, aes(factor(dose))) +
boxplot()
ggplot(ToothGrowth, aes(x = factor(dose), y = len)) +
boxplot()
ggplot(ToothGrowth, aes(x = factor(dose), y = len)) +
geom_boxplot()
ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_boxplot()
ggplot(ToothGrowth, aes(x = supp, y = len)) +
geom_boxplot(col = factor(dose))
ggplot(ToothGrowth, aes(x = supp, y = len, col = factor(dose))) +
geom_boxplot()
ggplot(ToothGrowth, aes(x = supp, y = len, fill = factor(dose))) +
geom_boxplot()
read.csv("data.csv")
obr <- read.csv("data.csv")
str(obr)
str(obr)
obr$rank <- factor(obr$rank)
str(obr)
obr$admit <- factor(obr$admit)
str(obr)
fit <- glm(admit ~ rank*gpa, obr, family = "binomial")
summary(fir)
summary(fit)
obr$prob  <- predict(object = fit, type = "response")
obr
obr$prob  <- predict(object = fit, type = "response")
obr_NA <- subset(obr, is.na(obr))
obr_NA
obr
obr_NA
obr
obr_noNA<- subset(obr, !is.na(obr))
obr
obr_NA
obr_noNA
obr_NA <- subset(obr, obr$admit == NA )
obr_NA
obr_NA <- subset(obr, obr$admit == 'NA' )
obr_NA
obr_NA <- subset(obr, obr$admit == 'NA')
obr_NA
obr_NA <- subset(obr, obr$admit == NA)
obr_NA
obr_NA <- subset(obr, is.na(obr))
obr_NA
obr_noNA<- subset(obr, !is.na(obr))
obr_noNA
obr_NA <- subset(obr, is.na(obr) == T)
obr_noNA<- subset(obr, is.na(obr) == F)
obr_NA
obr_noNA
obr_noNA<- subset(obr, is.na(obr) == F)
obr_NA <- subset(obr, is.na(obr$admit) == T)
obr_noNA<- subset(obr, is.na(obr$admit) == F)
obr_NA
obr_noNA
obr_NA
obr_noNA
obr_noNA
obr_NA
obr_noNA
obr_NA <- subset(obr, is.na(admit) == T)
obr_noNA<- subset(obr, is.na(admit) == F)
obr
obr_NA
obr_noNA
obr
obr_NA
obr_noNA
obr
obr_NA
is.na(obr$admit)
is.na(obr$admit) == T
is.na(obr$admit) == F
obr_NA <- subset(obr, is.na(obr$admit) == T)
bbb <- obr[1]
bbb
bbb <- obr[1:2]
bbb
bbb <- obr[1:4,2]
bbb
bbb <- obr[1:4,1]
bbb
obr
bbb <- obr[1:4,1]
bbb
bbb <- obr[1:4,1:4]
bbb
bbb <- obr[1:5,1:4]
bbb
subset(bbb)
subset(bbb, is.na(obr$admit) == T)
subset(bbb, is.na(obr[1]) == T)
subset(bbb, is.na(obr[1]))
bbb <- obr[1:5,1:4]
bbb
subset(bbb, is.na(obr))
bbb
subset(bbb, is.na(obr$admit))
obr[is.na(obr$admit) == T]
obr[is.na(obr$admit)]
obr[is.na(obr$admit), 1:4]
bbb[is.na(bbb$admit), 1:4]
bbb <- obr[1:5,1:4]
bbb
bbb[is.na(bbb$admit), 1:4]
obr[is.na(obr$admit), 1:4]
bbb[is.na(bbb$admit==T), 1:4]
obr[is.na(obr$admit==F), 1:4]
obr[is.na(obr$admit==T), 1:4]
obr[is.na(obr$admit==F), 1:4]
obr[is.na(obr$admit==T), 1:4]
obr[is.na(obr$admit==F), 1:4]
obr[is.na(obr$admit==T), 1:4]
obr[is.na(obr$admit==F), 1:4]
obr[is.na(obr$admit),]
obr[is.na(obr$admit),]
obr
str(obr)
obr[is.na(obr$admit),]
obr
obr[rowSums(is.na(obr$admit)) > 0,]
obr[is.na(obr$admit),]
bbb[is.na(bbb$admit==T), 1:4]
obr[is.na(obr$admit==T), 1:4]
obr[is.na(obr$admit==T), 1:4] == obr[is.na(obr$admit),]
obr_NA <- obr[is.na(obr$admit),]
obr_NA
bbb[is.na(bbb$admit==F), 1:4]
bbb[is.na(bbb$admit==T), 1:4]
bbb[is.na(bbb$admit==F), 1:4]
bbb[is.na(bbb$admit==T), 1:4]
bbb[is.na(bbb$admit==F), 1:4]
bbb[is.na(bbb$admit)==T, 1:4]
bbb[is.na(bbb$admit)==F, 1:4]
obr_NA <- bbb[is.na(bbb$admit)==T, 1:4]
obr_NA
obr_NA
obr_NA <- pbr[is.na(obr$admit)==T, 1:4]
obr_NA <- obr[is.na(obr$admit)==T, 1:4]
obr_NA
obr_NA <- obr[is.na(obr$admit)==T, 1:4]
obr_noNA<- obr[is.na(obr$admit)==F, 1:4]
obr <- read.csv("data.csv")
str(obr)
obr$rank <- factor(obr$rank)
obr$admit <- factor(obr$admit)
obr_NA <- obr[is.na(obr$admit)==T, 1:4]
obr_noNA<- obr[is.na(obr$admit)==F, 1:4]
fit <- glm(admit ~ rank*gpa, obr_NA, family = "binomial")
summary(fit)
rm(fit)
summary(fit)
summary(fit)
fit <- glm(admit ~ rank*gpa, obr_NA, family = "binomial")
summary(fit)
fit <- glm(admit ~ rank*gpa, obr_NA, family = "binomial")
obr_noNA<- obr[is.na(obr$admit)==F, 1:4]
obr_NA
fit <- glm(admit ~ rank*gpa, obr_noNA, family = "binomial")
summary(fit)
obr_noNA$admit
obr_NA$admit
obr_NA$admit <-predict(fit, newdata = obr, type = "response")
obr_NA
obr_NA$admit <-predict(fit, newdata = obr, type = "response")
obr <- read.csv("data.csv")
str(obr)
obr$rank <- factor(obr$rank)
obr$admit <- factor(obr$admit)
obr_NA <- obr[is.na(obr$admit)==T, 1:4]
obr_noNA<- obr[is.na(obr$admit)==F, 1:4]
rm(fit)
str(obr_NA)
str(obr_noNA)
obr_NA
obr_NA$admit <-predict(fit, newdata = obr_noNA, type = "response")
fit <- glm(admit ~ rank*gpa, obr_noNA, family = "binomial")
summary(fit)
obr_NA$admit <-predict(fit, newdata = obr_noNA, type = "response")
obr_NA$admit <-predict(fit, newdata = obr_NA, type = "response")
obr_NA
obr_NA$yes <- ifelse(obr_NA$admit >= 0.4, 1, 0)
obr_NA
sum(obr_NA$yes)
install.packages("stargazer")
library(stargazer)
install.packages("stargazer")
install.packages("stargazer")
subset(airquality, Month==80))
install.packages("stargazer")
library(stargazer)
install.packages("xtable")
library(xtable)
fit1  <- lm(mpg ~ cyl+disp, mtcars)
fit2 <- aov(mpg~am*vs,mtcars)
fit_table1 = xtable(fit1)
fit_table2 = xtable(fit2)
print(fit_table1, type = "html", file = "fit_table1.html")
print(fit_table2, type = "html", file = "fit_table2.html")
stargazer(fit1, type = "html",
dep.var.labels = "mpg",
covariate.labels = c("cyl","disp"), out = "models1.html")
