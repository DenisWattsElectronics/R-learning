summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
fit_full <- lm(Fertility ~ ., data = swiss)
summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
summary(fit_reduced1)
?anova
?step
?attitude
#####
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
ideal_model <- step(model_full, direction = 'backward')
summary(ideal_model)
ideal_model <- step(model_full, direction = 'backward', scope = scope)
summary(ideal_model)
model <- step(model_full, direction = 'backward', scope = scope)
summary(model)
model <- lm(rating ~ ., data = attitude)
ste <- step(model_full, direction = 'backward', scope = scope)
ste <- step(model_full, direction = 'backward')
#####
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
ideal_model <- step(model_full, direction = 'backward', scope = scope)
anova(model_full, ideal_model)
?LifeCycleSavings
swiss
pairs(swiss)
plot(swiss)
plot(swiss)
pairs(swiss)
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Education, y = Examination)) +
geom_point()
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, + 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector)
)
shapiro.test(log(my_vector))
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector))
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector))
shapiro.test(log(my_vector))
install.packages("QuantPsyc")
?lm.beta
ibrary(QuantPsyc)
library(QuantPsyc)
?lm.beta
lm.beta(mtcars[,c(1,3)])
lm.beta(mtcars[,c(1,3)])
mtcars[,c(1,3)]
mtcars[,c(1,1)]
mtcars[,c(1,2)]
mtcars[,c(2,2)]
mtcars[,c(3,3)]
mtcars[,c(3)]
mtcars[,1]
mtcars[,3]
mtcars[,c(1,3)]
lmm <- lm(mtcars[,1], mtcars[,3])
lmm <- lm(mtcars[,1], mtcars[,3], mtcars)
scale(mtcars)
beta.coef <- function(x){
scaled <- scale(mtcars)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
scaled <- scale(mtcars)
return(scaled)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
scaled <- scale(x)
return(scaled)
}
beta.coef(mtcars[,c(1,3)])
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
scaled <- scale(x)
ttt <- lm(x[,1] ~ x[,2], x)
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
summary(lll)
lll <- beta.coef(mtcars[,c(1,3)])
summary(lll)
lll$coefficients
beta.coef <- function(x){
scaled <- scale(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x <- scale(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x <- scale(x)
print(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x <- scale(x)
print(x)
#  ttt <- lm(x[,1] ~ x[,2], x)$coefficients
#  return(ttt)
}
beta.coef(mtcars[,c(1,3)])
summary(lll)
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x[,1] <- scale(x[,1])
x[,2] <- scale(x[,2])
print(x)
#  ttt <- lm(x[,1] ~ x[,2], x)$coefficients
#  return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x[,1] <- scale(x[,1])
x[,2] <- scale(x[,2])
#  print(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
?apply
BBb <- c(1, 1, 1, 1, 1)
BBB <- c(1, 1, 1, 1, 1)
BBB
apply(BBB, BBB + 1)
apply(BBB,,  BBB + 1)
apply(BBB,, ( BBB + 1))
mtcars[,1:6]
normality.test  <- function(x){
apply(x, 2, shapiro.test)
}
normality.test(mtcars[,1:6])
shapiro.test(mtcars)
shapiro.test(mtcars[,1])
shapiro.test(mtcars[,1])$p.value
normality.test  <- function(x){
apply(x, 2, shapiro.test)$p.value
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
apply(x, 2, shapiro.test$p.value)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
apply(x, 2, shapiro.test$p.value)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
(apply(x, 2, shapiro.test))$p.value
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
apply(x, 2, shapiro.test)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
y <- apply(x, 2, shapiro.test)
return(y$p.value)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
y <- apply(x, 2, shapiro.test)
return(y)
}
normality.test(mtcars[,1:6])
nnn <- normality.test(mtcars[,1:6])
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn[1,1]
nnn[1]
nnn[1]$p.value
nnn[1,]$p.value
size(nnn)
dim(nnn)
nrow(nnn)
ncol(nnn)
nnn
normality.test  <- function(x){
y <- apply(x, 1, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn$p.value
normality.test  <- function(x){
y <- apply(x, 1, shapiro.test)
return(y)
}
normality.test  <- function(x){
y <- apply(x, 2, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn[1]$mpg
nnn[2]$mpg
nnn[2]
nnn[2]$p.value
str(nnn[2])
(nnn[2])$p.value
(nnn[2])$p.value
nnn[2]$p.value
?sapply
normality.test  <- function(x){
y <- sapply(x, 2, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn
nnn[[1]]
nnn[[1]]$p.value
nnn[1]
nnn[[1]]
normality.test  <- function(x){
lapply(x, shapiro.test)[[1]]$p.value
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
normality.test  <- function(x){
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
lapply(mtcars[,1:6], shapiro.test)
lapply(mtcars[,1:6], shapiro.test)$p.value
lapply(mtcars[,1:6], shapiro.test)
lapply(mtcars[,1:6], shapiro.test)$wt
normality.test  <- function(x){
y <- unlist(lapply(x, shapiro.test))
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn
nnn$p.value
nnn <- normality.test(mtcars[,1:6])
?unlist
lapply(mtcars[,1:6], shapiro.test)
str(nnn)
nnn <- normality.test(mtcars[,1:6])
str(nnn)
y <- unlist(lapply(x, shapiro.test))
return(y)
normality.test  <- function(x){
y <- unlist(lapply(x, shapiro.test))
return(y)
}
?unlist
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
unlist(nnn)
nnn
unlist(nnn)
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test$p.value)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)["p.value",]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)["p.value"]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)["p.value",]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
nnn
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- sapply(x, shapiro.test)["p.value",]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
nnn
str(nnn)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
lm1 <- lm(Education ~ Examination, swiss)
summary(lm1)
swiss$Examination_squared <- (swiss$Examination)^2
lm2 <- lm(Education ~ Examination + Examination_squared, swiss)
summary(lm2)
anova(lm2, lm1)
swiss$lm1_fitted <- lm1$fitted
swiss$lm2_fitted <- lm2$fitted
swiss$lm1_resid <- lm1$resid
swiss$lm2_resid <- lm2$resid
swiss$obs_number <- 1:nrow(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point(size = 3) +
geom_line(aes(x = Examination, y = lm1_fitted), col = 'red', lwd=1) +
geom_line(aes(x = Examination, y = lm2_fitted), col = 'blue', lwd=1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
swiss$lm2_resid <- lm2$resid
swiss$obs_number <- 1:nrow(swiss)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
swiss$lm1_fitted <- lm1$fitted
swiss$lm2_fitted <- lm2$fitted
swiss$lm1_resid <- lm1$resid
swiss$lm2_resid <- lm2$resid
swiss$obs_number <- 1:nrow(swiss)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(y=0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm1_fitted, y = lm1_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 1)
library(gvlma)
install.packages(gvlma)
install.packages(gvlma)
mydata <- data.frame( DV = c(21.2,44.5,31.0,19.5,40.6,38.7,11.1,15.8,31.9,25.8,20.2,14.2,24.0,21.0,11.3,18.0,16.3,22.2,7.8,27.8,16.3,35.1,14.9,17.1,28.2,16.4,16.5,46.0,9.5,18.8,32.1,26.1,16.1,7.3,21.4,20.0,29.3,14.9,8.3,22.5,12.8,26.9,25.5,22.9,11.2,20.7,26.2,9.3,10.8,15.6),
mydata <- data.frame( DV = c(21.2,44.5,31.0,19.5,40.6,38.7,11.1,15.8,31.9,25.8,20.2,14.2,24.0,21.0,11.3,18.0,16.3,22.2,7.8,27.8,16.3,35.1,14.9,17.1,28.2,16.4,16.5,46.0,9.5,18.8,32.1,26.1,16.1,7.3,21.4,20.0,29.3,14.9,8.3,22.5,12.8,26.9,25.5,22.9,11.2,20.7,26.2,9.3,10.8,15.6),
IV = c(58,48,80,50,91,78,77,72,80,60,83,54,83,65,57,66,52,66,51,67,85,74,66,44,70,53,62,81,56,89,70,86,45,44,75,68,67,72,87,48,45,59,80,80,32,63,73,39,66,60))
cc
c
mydata <- data.frame( DV = c(21.2,44.5,31.0,19.5,40.6,38.7,11.1,15.8,31.9,25.8,20.2,14.2,24.0,21.0,11.3,18.0,16.3,22.2,7.8,27.8,16.3,35.1,14.9,17.1,28.2,16.4,16.5,46.0,9.5,18.8,32.1,26.1,16.1,7.3,21.4,20.0,29.3,14.9,8.3,22.5,12.8,26.9,25.5,22.9,11.2,20.7,26.2,9.3,10.8,15.6),
IV = c(58,48,80,50,91,78,77,72,80,60,83,54,83,65,57,66,52,66,51,67,85,74,66,44,70,53,62,81,56,89,70,86,45,44,75,68,67,72,87,48,45,59,80,80,32,63,73,39,66,60))
install.packages(c("backports", "BH", "brio", "broom", "carData", "class", "cli", "cpp11", "DBI", "digest", "fansi", "glue", "jsonlite", "knitr", "lmtest", "magrittr", "MASS", "Matrix", "memoise", "nlme", "nloptr", "nnet", "parallelly", "pillar", "pkgload", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "reticulate", "rex", "rlang", "RSQLite", "sessioninfo", "sp", "spatial", "stringi", "testthat", "tibble", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "brio", "broom", "carData", "class", "cli", "cpp11", "DBI", "digest", "fansi", "glue", "jsonlite", "knitr", "lmtest", "magrittr", "MASS", "Matrix", "memoise", "nlme", "nloptr", "nnet", "parallelly", "pillar", "pkgload", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "reticulate", "rex", "rlang", "RSQLite", "sessioninfo", "sp", "spatial", "stringi", "testthat", "tibble", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "brio", "broom", "carData", "class", "cli", "cpp11", "DBI", "digest", "fansi", "glue", "jsonlite", "knitr", "lmtest", "magrittr", "MASS", "Matrix", "memoise", "nlme", "nloptr", "nnet", "parallelly", "pillar", "pkgload", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "reticulate", "rex", "rlang", "RSQLite", "sessioninfo", "sp", "spatial", "stringi", "testthat", "tibble", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "brio", "broom", "carData", "class", "cli", "cpp11", "DBI", "digest", "fansi", "glue", "jsonlite", "knitr", "lmtest", "magrittr", "MASS", "Matrix", "memoise", "nlme", "nloptr", "nnet", "parallelly", "pillar", "pkgload", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "reticulate", "rex", "rlang", "RSQLite", "sessioninfo", "sp", "spatial", "stringi", "testthat", "tibble", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "brio", "broom", "carData", "class", "cli", "cpp11", "DBI", "digest", "fansi", "glue", "jsonlite", "knitr", "lmtest", "magrittr", "MASS", "Matrix", "memoise", "nlme", "nloptr", "nnet", "parallelly", "pillar", "pkgload", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "reticulate", "rex", "rlang", "RSQLite", "sessioninfo", "sp", "spatial", "stringi", "testthat", "tibble", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BH", "brio", "broom", "carData", "class", "cli", "cpp11", "DBI", "digest", "fansi", "glue", "jsonlite", "knitr", "lmtest", "magrittr", "MASS", "Matrix", "memoise", "nlme", "nloptr", "nnet", "parallelly", "pillar", "pkgload", "progressr", "quantreg", "Rcpp", "RcppArmadillo", "reticulate", "rex", "rlang", "RSQLite", "sessioninfo", "sp", "spatial", "stringi", "testthat", "tibble", "tinytex", "withr", "xfun", "xml2", "yaml"))
install.packages("~/Загрузки/gvlma_1.0.0.3.tar.gz", repos = NULL, type = "source")
library(gvlma)
read.csv(file = "homosc.csv")
getwd()
read.csv(file = "homosc.csv")
x <- gvlma(DV ~ IV, csv)
csv <- read.csv(file = "homosc.csv")
x <- gvlma(DV ~ IV, csv)
summary(x)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 1)
library(ggplot2)
ggplot(swiss, aes(x = lm2_fitted, y = lm2_resid)) +
geom_point(size = 3) + geom_hline(yintercept = 0, col = 'red', lwd = 1)
ggplot(swiss, aes(x = lm1_resid)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
qqnorm(lm1$residuals)
qqline(lm1$residuals)
par(mfrow=c(2,2)) ; plot(lm2)
ggplot(swiss, aes(x = lm2_resid)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
ggplot(mtcars, aes(x = wt)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
fit <- lm(mpg ~ disp, mtcars)
ggplot(mtcars, aes(x = mpg)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
fit <- lm(mpg ~ disp, mtcars)
ggplot(mtcars, aes(x = lm1_resid)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
mctrs <- mtcars
mtcrs$resid <- fit$resid
mctrs <- mtcars
mtcrs$resid <- fit$resid
mctrs <- mtcars
mtcrs$resid <- fit$resid
mtcrs <- mtcars
mtcrs$resid <- fit$resid
ggplot(mtcrs, aes(x = resid)) +
geom_histogram(binwidth = 4, fill = 'white', col = 'black')
ggplot(mtcrs, aes(x = resid)) +
geom_histogram(binwidth = 1, fill = 'white', col = 'black')
ggplot(mtcrs, aes(x = resid)) +
geom_histogram(binwidth = 1, fill = 'white', col = 'black')
ggplot(mtcrs, aes(x = resid)) +
geom_histogram(binwidth = 1, fill = 'red')
resid.norm  <- function(fit){
shap <- shapiro.test()
resids <- fit$resid
}
resid.norm  <- function(fit){
shap <- shapiro.test()
resids <- fit$resid
return(resids)
}
my_plot <- resid.norm(fit)
fit <- lm(mpg ~ disp, mtcars)
resid.norm  <- function(fit){
shap <- shapiro.test()
resids <- fit$resid
return(resids)
}
my_plot <- resid.norm(fit)
my_plot
fits <- lm(mpg ~ disp, mtcars)
my_plot <- resid.norm(fits)
resid.norm  <- function(fit){
shap <- shapiro.test()
resids <- fit$resid
print(resids)
}
my_plot <- resid.norm(fits)
my_plot
resid.norm  <- function(fit){
resids <- fit$resid
shap <- shapiro.test(resids)
print(resids)
}
my_plot <- resid.norm(fits)
my_plot
my_plot <- resid.norm(fits)
resid.norm  <- function(fit){
resids <- fit$resid
shap <- shapiro.test(resids)
return(resids)
}
my_plot <- resid.norm(fits)
my_plot
ggplot(my_plot, aes(x = resid)) +
geom_histogram(binwidth = 1, fill = 'red')
ggplot(my_plot) +
geom_histogram(binwidth = 1, fill = 'red')
plot(resids)
plot(my_plot)
str(my_plot)
ggplot(my_plot, aes()) +
geom_histogram(binwidth = 1, fill = 'red')
str(fits)
str(fits)
