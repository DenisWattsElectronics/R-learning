fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[!is.na(x$y)] <- x$y[!is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- x$y_full[is.na(x$y)]
return(x)
}
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
test_data <- as.data.frame(list(x_1 = c(10, 8, 11, 8, 10, 9, 9, 11, 11, 7),
x_2 = c(33, 43, 40, 27, 30, 31, 26, 37, 39, 26), y = c(13, 12, 17, 18, 10, NA, NA, 5, 10, 14)))
test_data
fill_na <- function(x){
fit_test <- lm(y ~ x_1*x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
fill_na <- function(x){
fit_test <- lm(y ~ x_1 + x_2, x)
y_full <- predict(fit_test, x)
x$y_full <- x$y
x$y_full[is.na(x$y)] <- y_full[is.na(x$y)]
return(x)
}
fill_na(test_data)
library(PerformanceAnalytics)
test_data[1]
install.packages(PerformanceAnalytics)
df <- mtcars
str(df)
df
df <- mtcars[,c(1, 2, 3, 4, 5, 6)]
str(df)
df <- mtcars[,c(1, 3, 4, 5, 6)]
str(df)
fit_test <- lm(wt ~ mpg + disp + drat + hp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp + hp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp, df)
summary(fit_test)
fit_test <- lm(wt ~ mpg + disp + hp, df)
summary(fit_test)
?attitude
str(attitude)
summary(lm(rating ~ complaints + critical), attitude)
summary(lm(rating ~ complaints + critical), attitude)
summary(lm(rating ~ complaints + critical, attitude))
summary(lm(rating ~ complaints * critical, attitude))
confint(lm(rating ~ complaints * critical, attitude))
hist(swiss$Catholic, col = 'red')
###
# categorical predictors
swiss
###
# categorical predictors
str(swiss)
###
# categorical predictors
?swiss
swiss$religious <- ifelse(swiss$Catholic > 60, 'Lots', 'Few')
swiss$religious <- as.factor(swiss$religious)
###
# categorical predictors
str(swiss)
swiss
fit3 <- lm(Fertility ~ Examination + religious, data = swiss)
summary(fit3)
confint(fir3)
confint(fit3)
###
# categorical predictors
str(swiss)
swiss
hist(swiss$Catholic, col = 'red')
swiss$religious <- ifelse(swiss$Catholic > 60, 'Lots', 'Few')
swiss$religious <- as.factor(swiss$religious)
fit3 <- lm(Fertility ~ Examination + religious, data = swiss)
summary(fit3)
fit4 <- lm(Fertility ~ Examination*religious, data = swiss)
fit4 <- lm(Fertility ~ religious*Examination, data = swiss)
summary(fit4)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()
library(ggplot1)
library(ggplot2)
library(ggplot3)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()  +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Fertility, col = religious)) +
geom_point()  +
geom_smooth(method = 'lm')
dfmtc <- mtcars
dfmtc$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
#####
dfmtc <- mtcars
dfmtc$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
fit <- lm(mpg ~ wt*am, dfmt)
fit <- lm(mpg ~ wt*am, dfmtc)
summary(dfmtc)
summary(fit)
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg) +
geom_smooth(method = 'lm')
/
wd
s
2
ggplot(dfmtc, aes(x = wt, y = mpg)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg)) +
geom_point()  +
geom_smooth(method = 'lm')
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
summary(fit)
mtcars$wt_centered <- mtcars$wt - mean(mtcars$wt)
dfmtc$wt_centered <- mtcars$wt - mean(mtcars$wt)
fit <- lm(mpg ~ wt_centered*am, dfmtc)
summary(fit)
ggplot(dfmtc, aes(x = wt, y = mpg, col = am)) +
geom_point()  +
geom_smooth(method = 'lm')
?rm
rm(swiss)
str(swiss)
swiss <- data.frame(swiss)
str(swiss)
fit_full <- lm(Fertility ~ ., data = swiss)
summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
fit_full <- lm(Fertility ~ ., data = swiss)
summary(fit_full)
fit_reduced1 <- lm(Fertility ~ Infant.Mortality + Examination + Catholic + Education, data = swiss)
summary(fit_reduced1)
?anova
?step
?attitude
#####
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
ideal_model <- step(model_full, direction = 'backward')
summary(ideal_model)
ideal_model <- step(model_full, direction = 'backward', scope = scope)
summary(ideal_model)
model <- step(model_full, direction = 'backward', scope = scope)
summary(model)
model <- lm(rating ~ ., data = attitude)
ste <- step(model_full, direction = 'backward', scope = scope)
ste <- step(model_full, direction = 'backward')
#####
model_full <- lm(rating ~ ., data = attitude)
model_null <- lm(rating ~ 1, data = attitude)
scope = list(lower = model_null, upper = model_full)
ideal_model <- step(model_full, direction = 'backward', scope = scope)
anova(model_full, ideal_model)
?LifeCycleSavings
swiss
pairs(swiss)
plot(swiss)
plot(swiss)
pairs(swiss)
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point()
ggplot(swiss, aes(x = Education, y = Examination)) +
geom_point()
pairs(swiss)
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth()
ggplot(swiss, aes(x = Examination, y = Education)) +
geom_point() +
geom_smooth(method = 'lm')
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, + 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector)
)
shapiro.test(log(my_vector))
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector))
shapiro.test(my_vector)
shapiro.test(1/my_vector)
shapiro.test(sqrt(my_vector))
shapiro.test(log(my_vector))
install.packages("QuantPsyc")
?lm.beta
ibrary(QuantPsyc)
library(QuantPsyc)
?lm.beta
lm.beta(mtcars[,c(1,3)])
lm.beta(mtcars[,c(1,3)])
mtcars[,c(1,3)]
mtcars[,c(1,1)]
mtcars[,c(1,2)]
mtcars[,c(2,2)]
mtcars[,c(3,3)]
mtcars[,c(3)]
mtcars[,1]
mtcars[,3]
mtcars[,c(1,3)]
lmm <- lm(mtcars[,1], mtcars[,3])
lmm <- lm(mtcars[,1], mtcars[,3], mtcars)
scale(mtcars)
beta.coef <- function(x){
scaled <- scale(mtcars)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
scaled <- scale(mtcars)
return(scaled)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
scaled <- scale(x)
return(scaled)
}
beta.coef(mtcars[,c(1,3)])
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
scaled <- scale(x)
ttt <- lm(x[,1] ~ x[,2], x)
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
summary(lll)
lll <- beta.coef(mtcars[,c(1,3)])
summary(lll)
lll$coefficients
beta.coef <- function(x){
scaled <- scale(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x <- scale(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x <- scale(x)
print(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x <- scale(x)
print(x)
#  ttt <- lm(x[,1] ~ x[,2], x)$coefficients
#  return(ttt)
}
beta.coef(mtcars[,c(1,3)])
summary(lll)
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x[,1] <- scale(x[,1])
x[,2] <- scale(x[,2])
print(x)
#  ttt <- lm(x[,1] ~ x[,2], x)$coefficients
#  return(ttt)
}
beta.coef(mtcars[,c(1,3)])
beta.coef <- function(x){
x[,1] <- scale(x[,1])
x[,2] <- scale(x[,2])
#  print(x)
ttt <- lm(x[,1] ~ x[,2], x)$coefficients
return(ttt)
}
beta.coef(mtcars[,c(1,3)])
?apply
BBb <- c(1, 1, 1, 1, 1)
BBB <- c(1, 1, 1, 1, 1)
BBB
apply(BBB, BBB + 1)
apply(BBB,,  BBB + 1)
apply(BBB,, ( BBB + 1))
mtcars[,1:6]
normality.test  <- function(x){
apply(x, 2, shapiro.test)
}
normality.test(mtcars[,1:6])
shapiro.test(mtcars)
shapiro.test(mtcars[,1])
shapiro.test(mtcars[,1])$p.value
normality.test  <- function(x){
apply(x, 2, shapiro.test)$p.value
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
apply(x, 2, shapiro.test$p.value)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
apply(x, 2, shapiro.test$p.value)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
(apply(x, 2, shapiro.test))$p.value
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
apply(x, 2, shapiro.test)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
y <- apply(x, 2, shapiro.test)
return(y$p.value)
}
normality.test(mtcars[,1:6])
normality.test  <- function(x){
y <- apply(x, 2, shapiro.test)
return(y)
}
normality.test(mtcars[,1:6])
nnn <- normality.test(mtcars[,1:6])
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn[1,1]
nnn[1]
nnn[1]$p.value
nnn[1,]$p.value
size(nnn)
dim(nnn)
nrow(nnn)
ncol(nnn)
nnn
normality.test  <- function(x){
y <- apply(x, 1, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn$p.value
normality.test  <- function(x){
y <- apply(x, 1, shapiro.test)
return(y)
}
normality.test  <- function(x){
y <- apply(x, 2, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn[1]$mpg
nnn[2]$mpg
nnn[2]
nnn[2]$p.value
str(nnn[2])
(nnn[2])$p.value
(nnn[2])$p.value
nnn[2]$p.value
?sapply
normality.test  <- function(x){
y <- sapply(x, 2, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn
nnn[[1]]
nnn[[1]]$p.value
nnn[1]
nnn[[1]]
normality.test  <- function(x){
lapply(x, shapiro.test)[[1]]$p.value
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
normality.test  <- function(x){
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
lapply(mtcars[,1:6], shapiro.test)
lapply(mtcars[,1:6], shapiro.test)$p.value
lapply(mtcars[,1:6], shapiro.test)
lapply(mtcars[,1:6], shapiro.test)$wt
normality.test  <- function(x){
y <- unlist(lapply(x, shapiro.test))
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn
nnn$p.value
nnn <- normality.test(mtcars[,1:6])
?unlist
lapply(mtcars[,1:6], shapiro.test)
str(nnn)
nnn <- normality.test(mtcars[,1:6])
str(nnn)
y <- unlist(lapply(x, shapiro.test))
return(y)
normality.test  <- function(x){
y <- unlist(lapply(x, shapiro.test))
return(y)
}
?unlist
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
unlist(nnn)
nnn
unlist(nnn)
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test$p.value)
return(y)
}
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)["p.value",]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn <- normality.test(mtcars[,1:6])
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)["p.value"]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
str(nnn)
nnn
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- lapply(x, shapiro.test)["p.value",]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
nnn
normality.test  <- function(x){
#  y <- unlist(lapply(x, shapiro.test))
y <- sapply(x, shapiro.test)["p.value",]
return(y)
}
nnn <- normality.test(mtcars[,1:6])
nnn
str(nnn)
