max(att_sorted$complaints + att_sorted$raises + att_sorted$advance), ]
att_sorted <- head(attitude[attitude$learning >= 71, ], 5)
attitude[att_sorted$complaints + att_sorted$raises + att_sorted$advance ==
max(att_sorted$complaints + att_sorted$raises + att_sorted$advance), ]
attitude[att_sorted$complaints + att_sorted$raises + att_sorted$advance ==
max(att_sorted$complaints + att_sorted$raises + att_sorted$advance), ]
max(att_sorted$complaints + att_sorted$raises + att_sorted$advance)
att_sorted <- head(attitude[attitude$learning >= 71, ], 5)
att_sorted
att_sortes[att_sorted$complaints + att_sorted$raises + att_sorted$advance ==
max(att_sorted$complaints + att_sorted$raises + att_sorted$advance), ]
att_sorted[att_sorted$complaints + att_sorted$raises + att_sorted$advance ==
max(att_sorted$complaints + att_sorted$raises + att_sorted$advance), ]
?within
subset(attitude, rating < 50, -rating)
attitude[attitude$rating < 50, -"rating"]
attitude[attitude$rating < 50, names(attitude) != "rating"]
attitude[rating < 50, names(attitude) != "rating"]
subset(sel = -rating, sub = rating < 50, attitude)
attitude[attitude$rating < 50, names(attitude) != "rating"]
quakes
?quakes
str(quakes)
summary(quakes)
tail(quakes)
evian1 <- read.csv(https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv﻿)
evian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv﻿")
evian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
evian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
evian1
evian2
evian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
evian1
evian2
summary(evian2)
any(!conplete.cases(avian1))
any(!complete.cases(avian1))
any(!complete.cases(evian1))
any(!complete.cases(evian2))
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";")
evian2
?read.csv
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = ',')
evian2
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = ',')
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = '.')
evian2
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = '.', header = 4)
evian2
evian2 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = '.', skip = 4)
evian2
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = '.', skip = 4)
evian2
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv", sep = ";", quote = '.', skip = 10)
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T)
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '', skip = 5, header = T, comment.char = "%")
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = ',', skip = 5, header = T, comment.char = "%")
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%")
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%")
head(evian2)
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%", na.strings = "Don't remember")
head(evian2)
evian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%", na.strings = "Don't remember")
head(evian2)
head(evian1)
head(evian2)
evian0 <- (file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
head(evian0)
evian0 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
head(evian0)
evian2$Observer <- "CL"
head(evian2)
evian <- c(evian1, evian2)
evian
summary(evian)
summary(evian1)
summary(evian2 )
summary(evian2)
summary(evian1)
summary(evian2)
str(evian1)
str(evian2)
evian2$Observer <- as.factor("CL")
evian <- c(evian1, evian2)
str(evian)
dummary(evian)
summary(evian)
merge(evian1, evian2)
evian <- merge(evian1, evian2)
str(evian)
summary(evian)
tail(evian)
evian
evian <- rbind(evian1, evian2)
str(evian)
tail(evian)
coverage_variables <- names(avian)[-(1:4)][c(T,F)]
coverage_variables <- names(evian)[-(1:4)][c(T,F)]
avian0 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
avian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
avian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%", na.strings = "Don't remember")
avian2$Observer <- as.factor("CL")
head(avian0)
head(avian1)
head(avian2)
any(!complete.cases(avian1))
any(!complete.cases(avian2))
avian <- rbind(avian1, avian2)
str(avian)
str(avian1)
str(avian2)
summary(avian)
summary(avian1)
summary(avian2)
tail(avian)
avian
avian
avian <- rbind(avian1, avian2)
avian0 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
avian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
avian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%", na.strings = "Don't remember")
avian2$Observer <- as.factor("CL")
evian0 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv")
evian1 <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
evian2 <- read.csv(file = "https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat2.csv",
sep = ";", quote = '.', skip = 5, header = T, comment.char = "%", na.strings = "Don't remember")
evian2$Observer <- as.factor("CL")
head(evian0)
head(evian1)
head(evian2)
any(!complete.cases(evian1))
any(!complete.cases(evian2))
evian <- rbind(evian1, evian2)
head(evian0)
head(evian1)
head(evian2)
any(!complete.cases(evian1))
any(!complete.cases(evian2))
evian <- rbind(evian1, evian2)
str(evian)
str(evian1)
str(evian2)
summary(evian)
summary(evian1)
summary(evian2)
tail(evian)
evian
coverage_variables <- names(evian)[-(1:4)][c(T,F)]
evian$total_coverage <- rowSums(evian[, coverage_variables])
summary(evian$total_coverage)
evian <- rbind(evian1, evian2)
str(evian)
str(evian1)
str(evian2)
summary(evian)
summary(evian1)
summary(evian2)
tail(evian)
evian
evian <- rbind(evian1, evian2)
evian
coverage_variables <- names(evian)[-(1:4)][c(T,F)]
evian$total_coverage <- rowSums(evian[, coverage_variables])
summary(evian$total_coverage)
my_var <- "Site"; evian$my_var
my_var <- "Site"; evian[[my_var]]
my_var <- "Site"; evian$my_var
my_var <- "Site"; evian[[my_var]]
my_var <- "Site"; evian$my_var
my_var <- "Site"; evian[[my_var]]
my_var <- "Site"; evian[[my_var]]
my_var <- "Site"; evian$my_var
my_var
my_var <- "Site"; evian[[my_var]]
my_var <- "Site"; evian$my_var
height_variables <- names(evian)[-(1:4)][c(F,T)]
height_variables
height_variables <- names(evian1)[-(1:4)][c(F,T)]
height_variables
evian$height_variables
evian$[[height_variables]]
evian1$[[height_variables]]
height_variables <- names(evian1)[-(1:4)][c(F,T)]
height_variables
evian1$[[height_variables]]
evian1[[height_variables]]
evian1[[height_variables[1]]]
max(evian1[[height_variables[1]]])
height_variables
max(evian1[[height_variables[1]]])
max(evian1[[height_variables[2]]])
max(evian1[[height_variables[3]]])
max(evian1[[height_variables[4]]])
max(evian1[[height_variables[5]]])
max(evian1[[height_variables[6]]])
height_variables
height_variables <- names(avian)[-(1:5)][c(T, F)]
height_variables <- names(evian1)[-(1:5)][c(T, F)]
sort(sapply(evian1[height_variables], max), decreasing = T)
height_variables
sapply(evian1[height_variables], max)
install.packages(stringr)
install.packages('stringr')
length("Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян.")
library(stringi)
strr <- "Аэрофотосъёмка ландшафта уже выявила земли богачей и процветающих крестьян."
strr
strr
stri_length(strr)
nchar(NA)
library(stringr)
hamlet <- "To be, or not to be: that is the question:
Whether 'tis nobler in the mind to suffer
The slings and arrows of outrageous fortune,
Or to take arms against a sea of troubles,
And by opposing end them?"
hamlet <- str_replace_all(hamlet, "[:punct:]", "")
hamlet <- tolower(unlist(str_split(hamlet, "[:space:]")))
hamlet
sum(str_count(string = hamlet, pattern = 'to'))
sum(str_count(string = hamlet, pattern = 'f'))
sum(str_count(string = hamlet, pattern = 'q'))
sum(str_count(string = hamlet, pattern = 'w'))
5 + 1 + 2
sum(str_count(string = hamlet, pattern = 'w'|'f'|'q'))
?quakes
str(quakes)
cut(quakes$mag, breaks = 10, right = T)
summary(quakes$mag)
cut(quakes$mag, breaks = 5, right = T)
table(cut(quakes$mag, breaks = 5, right = T))
table(cut(quakes$mag, breaks = c(4, 4.5, 5, 5.5, 6), right = T))
table(cut(quakes$mag, breaks = c(4, 4.5, 5, 5.5, 6, 6.5), right = T))
table(cut(quakes$mag, breaks = c(4, 4.5, 5, 5.5, 6, 6.5), right = F)
table(cut(quakes$mag, breaks = c(4, 4.5, 5, 5.5, 6, 6.5), right = F))
table(cut(quakes$mag, breaks = c(4, 4.5, 5, 5.5, 6, 6.5), left = T))
table(quakes$mag)
sort(table(cut(quakes$mag, seq(4, 6.5, by = 0.5), r = F)), d = T)
cat(names(sort(table(cut(quakes$mag, seq(4, 6.5, by = 0.5), right = F)), decreasing = T)))
sort(table(cut(quakes$mag, seq(4, 6.5, 0.5), right = F)), decreasing = T)
#install.packages('stringr')
library(stringr)
df <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
#отбираем только те столбцы, у которых встречается P
df2 <- df[names(df)[str_detect(names(df),"^P")]]
#добавляем суммы по строчкам
df2$total_coverage <- apply(df2,1,sum)
#удаляем цифры из значений и даем новой переменной
df2$site_name <- str_replace(df$Site, "[:digit:]+", "")
#считаем среднее для видов
df2$site_name <- factor(df2$site_name)
sort(tapply(df2$total_coverage, df2$site_name, mean))﻿
sort(tapply(df2$total_coverage, df2$site_name, mean))
x <- read.csv("avianHabitat.csv")
x <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
x$total <- rowSums(x[grepl("^P.", names(x))])
x$sname <- factor(gsub("[0-9]", "", as.character(x$Site)))
which.min(tapply(x$total, x$sname, mean))
sort(tapply(df2$total_coverage, df2$site_name, mean))
sapply (names(df)[str_detect(names(df), "Ht")], function(x) tapply(x, df$Observer, max))
tapply(Ht, Observer, max)
for (i in variab_plants) {
print(i)
print(sort(tapply(w[[i]], w$Observer, max), decreasing = T)[1])
}
for (i in variab_plants) {
print(i)
print(sort(tapply(w[[i]], w$Observer, max), decreasing = T)[1])
}
sapply(avian[, grepl("Ht", names(avian))], function(name) {tapply(name, avian$Observer, max)})
avian <- read.csv("https://raw.githubusercontent.com/tonytonov/Rcourse/master/R%20programming/avianHabitat.csv")
sapply(avian[, grepl("Ht", names(avian))], function(name) {tapply(name, avian$Observer, max)})
height_variables <- names(avian)[str_detect(names(avian), "Ht$")]
sapply(height_variables, function(x) names(which.max(tapply(avian[[x]], avian$Observer, max))))
?rep
?norm
norm
"%+%" <- function(x, y) {
l <- c(length(x), length(y))
}
1:5 %+% 1:2
"%+%" <- function(x, y) {
l <- c(length(x), length(y))
length(x) <- length(y) <- min(l)
}
1:5 %+% 1:2
"%+%" <- function(x, y) {
l <- c(length(x), length(y))
length(x) <- length(y) <- min(l)
s <- x + y
return(s[1:max(l)])
}
1:5 %+% 1:2
# Random walk with absorption
simulate_walk <- function(lower = -10, upper = 10, n_max = 200, p = 1e-3) {
current_position <- (lower + upper) / 2
for (i in 1:n_max) {
is_absorbed <- rbinom(1, 1, p)
if (is_absorbed) return(list(status = "Absorbed",
position = current_position,
steps = i))
current_position <- current_position + rnorm(1)
if (current_position < lower) return(list(status = "Left breach",
position = current_position,
steps = i))
if (current_position > upper) return(list(status = "Right breach",
position = current_position,
steps = i))
}
return(list(status = "Max steps reached",
position = current_position,
steps = n_max))
}
# Simulate results
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
position = sapply(result, function(x) x$position),
steps = sapply(result, function(x) x$steps)
)
# Inspect results
tapply(result$position, result$status, length)
tapply(result$steps, result$status, mean)
# Random walk with absorption
simulate_walk <- function(maxr = 6, n_max = 100, p = 1e-2) {
current_position <- c(0, 0)
for (i in 1:n_max) {
is_absorbed <- rbinom(1, 1, p)
if (is_absorbed) return(list(status = "Absorbed",
position = current_position,
steps = i))
current_position <- c(current_position[1] + rnorm(1), current_position[2] + rnorm(1))
if (sqrt(current_position[1]^2 + current_position[2]^2) < maxl) return(list(status = "Breach",
position = current_position,
steps = i))
}
return(list(status = "Max steps reached",
position = current_position,
steps = n_max))
}
# Simulate results
result <- replicate(1000, simulate_walk(), simplify = FALSE)
# Random walk with absorption
simulate_walk <- function(maxr = 6, n_max = 100, p = 1e-2) {
current_position <- c(0, 0)
for (i in 1:n_max) {
is_absorbed <- rbinom(1, 1, p)
if (is_absorbed) return(list(status = "Absorbed",
position = current_position,
steps = i))
current_position <- c(current_position[1] + rnorm(1), current_position[2] + rnorm(1))
if (sqrt(current_position[1]^2 + current_position[2]^2) < maxr) return(list(status = "Breach",
position = current_position,
steps = i))
}
return(list(status = "Max steps reached",
position = current_position,
steps = n_max))
}
# Simulate results
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
position = sapply(result, function(x) x$position),
steps = sapply(result, function(x) x$steps)
)
# Inspect results
tapply(result$position, result$status, length)
# Simulate results
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
position = sapply(result, function(x) x$position),
steps = sapply(result, function(x) x$steps)
)
head(result)
# Random walk with absorption
simulate_walk <- function(maxr = 6, n_max = 100, p = 1e-2) {
current_position <- c(0, 0)
for (i in 1:n_max) {
is_absorbed <- rbinom(1, 1, p)
if (is_absorbed) return(list(status = "Absorbed",
position = current_position,
steps = i))
current_position <- c(current_position[1] + rnorm(1), current_position[2] + rnorm(1))
if (sqrt(current_position[1]^2 + current_position[2]^2) < maxr) return(list(status = "Breach",
position = current_position[1],
steps = i))
}
return(list(status = "Max steps reached",
position = current_position,
steps = n_max))
}
# Simulate results
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
position = sapply(result, function(x) x$position),
steps = sapply(result, function(x) x$steps)
)
head(result)
# Simulate results
simulate_walk()
# Random walk with absorption
simulate_walk <- function(maxr = 6, n_max = 100, p = 1e-2) {
current_position <- c(0, 0)
for (i in 1:n_max) {
is_absorbed <- rbinom(1, 1, p)
if (is_absorbed) return(list(status = "Absorbed",
position = current_position,
steps = i))
current_position <- c(current_position[1] + rnorm(1), current_position[2] + rnorm(1))
if (sqrt(current_position[1]^2 + current_position[2]^2) > maxr) return(list(status = "Breach",
position = current_position[1],
steps = i))
}
return(list(status = "Max steps reached",
position = current_position,
steps = n_max))
}
# Simulate results
simulate_walk()
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
position = sapply(result, function(x) x$position),
steps = sapply(result, function(x) x$steps)
)
head(result)
# Random walk with absorption
simulate_walk <- function(maxr = 6, n_max = 100, p = 1e-2) {
current_position <- c(0, 0)
for (i in 1:n_max) {
is_absorbed <- rbinom(1, 1, p)
if (is_absorbed) return(list(status = "Absorbed"))
current_position <- c(current_position[1] + rnorm(1), current_position[2] + rnorm(1))
if (sqrt(current_position[1]^2 + current_position[2]^2) > maxr) return(list(status = "Breach"))
}
return(list(status = "Max steps reached",
position = current_position,
steps = n_max))
}
# Simulate results
simulate_walk()
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
position = sapply(result, function(x) x$position),
steps = sapply(result, function(x) x$steps)
)
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status),
)
head(result)
# Inspect results
tapply(result$position, result$status, length)
tapply(result$steps, result$status, mean)
# Simulate results
simulate_walk()
# Simulate results
simulate_walk()
# Simulate results
simulate_walk()
# Simulate results
simulate_walk()
# Simulate results
simulate_walk()
result <- replicate(1000, simulate_walk(), simplify = FALSE)
result
result <- data.frame(
status = sapply(result, function(x) x$status),
)
result <- data.frame(
status = sapply(result, function(x) x$status)
)
head(result)
# Inspect results
tapply(result$position, result$status, length)
# Inspect results
tapply(result$status, length)
# Inspect results
tapply(result$status)
summary(result)
result <- replicate(10000, simulate_walk(), simplify = FALSE)
result <- data.frame(
status = sapply(result, function(x) x$status)
)
summary(result)
result <- replicate(1000000, simulate_walk(), simplify = FALSE)
funs <- c("print","summary","plot")
meths <- lapply(funs, methods)
grepl("matrix", meths)
grepl("function", meths)
grepl("default", meths)
