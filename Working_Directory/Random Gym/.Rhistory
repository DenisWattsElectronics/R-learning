# Here we go again!
Here
# Here we go again!
print("Here we go again")
# Here we go again!
print("Here we go again!")
data()
?itis
?iris
help("iris")
?iris
example("iris")
iris
str(iris)
summary(iris)
plot(iris)
head(iris)
summary(iris)
str(iris)
summary(iris&setosa)
summary(iris[species == "setosa"])
summary(iris[iris$species == "setosa"])
iris[iris$species == "setosa"]
iris[iris$species == setosa]
str(iris)
iris[iris$Species == 'setosa']
iris$Species == 'setosa'
iris[iris$Species == 'setosa']
iris[,iris$Species == 'setosa']
iris[iris$Species == 'setosa',]
summary(iris[iris$Species == 'setosa',])
str(iris)
summary(iris[iris$species == "setosa"])
summary(iris)
summary(iris[iris$Species == 'setosa',])
summary(iris[iris$Species == 'versicolor',])
summary(iris[iris$Species == 'virginica',])
mean(iris)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length[iris$Species == 'versicolor',])
mean(iris$Sepal.Length[iris$Species == 'versicolor'])
summary(iris[iris$Species == 'versicolor',])
sd(iris$Sepal.Length[iris$Species == 'versicolor'])
library(phych)
library(psych)
?describe
describe(iris)
hist(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Length[iris$Species == 'versicolor'])
hist(iris$Sepal.Length[iris$Species == 'versicolor'], breaks  = 10)
hist(iris$Sepal.Length[iris$Species == 'versicolor'], breaks  = 100)
hist(iris$Sepal.Length[iris$Species == 'versicolor'], breaks  = 4)
plot(iris$Sepal.Length[iris$Species == 'versicolor'])
boxplot(iris$Sepal.Length[iris$Species == 'versicolor'])
boxplot(iris$Sepal.Length)
boxplot(iris)
str(iris)
boxplot(iris, x = iris$Species)
library(ggplot2)
ggplot(data = iris, aes(x = iris$Sepal.Length, y = iris$Species)) +
geom_boxplot(aes(fill = iris$Species), width = 0.8) + theme_bw()
ggplot(data = iris, aes(x = iris$Petal.Length, y = iris$Species)) +
geom_boxplot(aes(fill = iris$Species), width = 0.8) + theme_bw()
library(ggplot2)
ggplot(data = iris, aes(x = iris$Petal.Length, y = iris$Species)) +
geom_boxplot(aes(fill = iris$Species), width = 0.8) + theme_bw()
?shapiro.test
?t.test
?cor.test
x <- c(44.4, 45.9, 41.9, 53.3, 44.7, 44.1, 50.7, 45.2, 60.1)
y <- c( 2.6,  3.1,  2.5,  5.0,  3.6,  4.0,  5.2,  2.8,  3.8)
cor.test(x, y, method = "kendall", alternative = "greater")
cor.test(x, y, method = "kendall", alternative = "greater",
exact = FALSE) # using large sample approximation
df  <- mtcars
cor.test(x = df$mpg, y = df$hp)
fit  <- cor.test(x = df$mpg, y = df$hp)
fir
fit
cor.test(~ mpg + hp, df)
str(fit)
fit$p.value
plot(x = df$mpg, y = df$hp)
df  <- mtcars
df_numeric  <- df[, c(1,3:7)]
pairs(df_numeric)
cor(df_numeric)
###---
df  <- mtcars
df_numeric  <- df[,c(1,3:7)]
str(df_muneric)
df_numeric  <- df[,c(1,3:7)]
str(df_muneric)
str(df_numeric)
str(df)
str(df_numeric)
fit  <- lm(mpg ~ hp, df)
summary(fit)
fit
summary(fit)
ggplot(df, aes(hp, mpg))+
geom_point(size = 5)+
geom_smooth(method = "lm")+
facet_grid(.~cyl)
ggplot(df, aes(hp, mpg))+
geom_smooth(method = "lm", se = F)+
facet_grid(.~cyl)
fitted_values_mpg  <- data.frame(mpg = df$mpg, fitted = fit$fitted.values )
new_hp <- data.frame(hp = c(100, 150, 129, 300))
new_hp$mpg  <- predict(fit, new_hp)
predict(fit, new_hp)
#---
my_df  <- mtcars
my_df$cyl  <- factor(my_df$cyl, labels = c("four", "six", "eight"))
fit  <- lm(mpg ~ cyl, my_df)
summary(fit)
?chisq.test
###---
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
?fisher.test
?t.test
###---
t.test(1:10, y = c(7:20))      # P = .00001855
t.test(1:10, y = c(7:20))      # P = .00001855
t.test(1:10, y = c(7:20, 200)) # P = .1245    -- NOT significant anymore
## Classical example: Student's sleep data
plot(extra ~ group, data = sleep)
## Traditional interface
with(sleep, t.test(extra[group == 1], extra[group == 2]))
## Formula interface
t.test(extra ~ group, data = sleep)
?aov
###---
## From Venables and Ripley (2002) p.165.
## Set orthogonal contrasts.
op <- options(contrasts = c("contr.helmert", "contr.poly"))
( npk.aov <- aov(yield ~ block + N*P*K, npk) )
summary(npk.aov)
coefficients(npk.aov)
pairs(swiss)
?anova()
#-
fit <- aov(sr ~ ., data = LifeCycleSavings)  ## can also use `lm`
fit
z <- anova(fit)
z
?shapiro.test
df <- iris
plot(iris)
str(iris)
?iris
iris3
iris
summary(iris)
plot(iris$Sepal.Length)
plot(iris$Sepal.Length)
plot(iris$Sepal.Width)
plot(iris$Petal.Length)
plot(iris$Petal.Width)
plot(iris$Species)
plot(iris$Sepal.Length)
par(mfrow=c(2,2))
plot(iris$Sepal.Length)
plot(iris$Sepal.Width)
plot(iris$Petal.Length)
plot(iris$Petal.Width)
View(ii)
plot(iris$Petal.Length)
par(mfrow=c(1.1))
plot(iris$Sepal.Length)
plot(iris$Sepal.Width)
plot(iris$Petal.Length)
par()
plot(iris$Sepal.Length)
plot(iris$Sepal.Width)
plot(iris$Petal.Length)
plot(iris$Petal.Width)
library(dplyr)
library(ggplot2)
iris %>%
select(Species, Petal.Length, Sepal.Length) %>%
ggplot(aes(Petal.Length, Sepal.Length, colour = Species, shape = Species)) +
geom_point()
plot(iris$Sepal.Width)
