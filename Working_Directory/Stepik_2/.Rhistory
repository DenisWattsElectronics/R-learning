}
my_names(test_data, names)
dataset[,]
dataset[1,]
dataset[,1]
dataset[1,]
c(dataset[1,],dataset[2,])
grepl(names, dataset$name)
grepl(names[1], dataset$name)
my_names <- function (dataset, names){
return(as.data.frame(sapply(names, function(x) dataset[grepl(dataset, dataset$name),])))
}
my_names(test_data, names)
?grepl
my_names <- function (dataset, names){
return(as.data.frame(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(as.data.frame(lapply(names, function(x) dataset[grepl(x, dataset$name),])))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(as.data.frame(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
}
my_names <- function (dataset, names){
return(as.data.frame(names, function(x) dataset[grepl(x, dataset$name),]))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
}
my_names <- function (dataset, names){
return(sapply(names, function(x) dataset[grepl(x, dataset$name),]))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(as.data.frame(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(sapply(names, function(x) dataset[grepl(x, dataset$name),]))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(t(as.data.frame(sapply(names, function(x) dataset[grepl(x, dataset$name),]))))
}
my_names(test_data, names)
dataset
my_names <- function (dataset, names){
return(t(as.data.frame(sapply(names, function(x) dataset[grepl(x, dataset$name),]))))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(as.data.frame(t(sapply(names, function(x) dataset[grepl(x, dataset$name),]))))
}
my_names(test_data, names)
my_names <- function (dataset, names){
z <- as.data.frame(t(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
sapply(z, function(x) as.numeric(x[, 2]))
}
my_names(test_data, names)
my_names <- function (dataset, names){
return(as.data.frame(t(sapply(names, function(x) dataset[grepl(x, dataset$name),]))))
}
x <- my_names(test_data, names)
x
x[3,]
x[, 3]
x[, 2]
str(x)
as.numeric(x[, 2])
x[, 2] <- as.numeric(x[, 2])
x
my_names <- function (dataset, names){
z <- as.data.frame(t(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
z[, 2] <- as.numeric(z[, 2])
}
x <- my_names(test_data, names)
x
my_names(test_data, names)
my_names <- function (dataset, names){
z <- as.data.frame(t(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
z[, 2] <- as.numeric(z[, 2])
}
my_names <- function (dataset, names){
z <- as.data.frame(t(sapply(names, function(x) dataset[grepl(x, dataset$name),])))
z[, 2] <- as.numeric(z[, 2])
return(z)
}
my_names(test_data, names)
getwd()
###
set.seed(0)
y <- rnorm(100)
factor1 <- rep(1:2, each=50)
factor2 <- rep(3:4, 50)
lm(as.formula(paste("y~", paste(factors, collapse="+"))))
factors <- c("factor1", "factor2")
lm(as.formula(paste("y~", paste(factors, collapse="+"))))
?as.formula
y
?rep
rep(1:4, 2)
rep(1:2, each=50)
rep(3:4, 50)
factors
as.table(factors)
?lm
lm(as.formula(paste("y~", paste(factors, collapse="+"))))
/as.formula
?as.formula
fo
?fo
###
set.seed(0)
y <- rnorm(100)
factor1 <- rep(1:2, each=50)
factor2 <- rep(3:4, 50)
factors <- c("factor1", "factor2")
lm(as.formula(paste("y~", paste(factors, collapse="+"))))
smart_lm <- function(x){
}
swiss
swiss[1]
shapiro.test(swiss[2])
swiss[1]
str(swiss)
shapiro.test(as.numeric(swiss[2]))
shapiro.test(as.numeric(swiss[1]))
as.numeric(swiss[1])
y <- rnorm(100)
y
factor1 <- rep(1:2, each=50)
factor2 <- rep(3:4, 50)
factor1
factor2
factors
lm(as.formula(paste("y~", paste(factors, collapse="+"))))
lm(as.formula(paste("y~", paste(factors, collapse="+"))))
lm(as.formula(paste("y~", paste(factors, collapse="+"))))$p.value
aaa <- lm(as.formula(paste("y~", paste(factors, collapse="+"))))
str(aaa)
sss$coefficients
coefficient
aaa <- lm(as.formula(paste("y~", paste(factors, collapse="+"))))
sss$coefficients
aaa$coefficients
aaa$coefficients
str(swiss)
shapiro.test(y)
shapiro.test(swiss)
shapiro.test(swiss$Fertility)
shapiro.test(swiss$.)
apply(swiss, shapiro.test())
apply(swiss, function(x) shapiro.test(c))
apply(swiss, function(x) shapiro.test(x))
apply(swiss, function(x) shapiro.test(x))
sapply(swiss, function(x) shapiro.test(x))
lapply(swiss, function(x) shapiro.test(x))
sapply(swiss, function(x) shapiro.test(x))
str(sapply(swiss, function(x) shapiro.test(x)))
sapply(swiss, function(x) shapiro.test(x))
sapply(swiss, function(x) shapiro.test(x))$p.value
sapply(swiss, function(x) shapiro.test(x)$p.value)
smart_lm <- function(x){
sapply(x, function(y) shapiro.test(y)$p.value)
}
smart_lm(swiss)
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
}
shapiro.test(as.numeric(swiss[1]))
sapply(swiss, function(x) shapiro.test(x)$p.value)
str(sapply(swiss, function(x) shapiro.test(x)))
sapply(swiss, function(x) shapiro.test(x)$p.value)
df <- swiss[1]
df
swiss[shares < 0.05]
shares <- sapply(swiss, function(x) shapiro.test(x)$p.value)
swiss[shares < 0.05]
shares <- sapply(swiss, function(x) shapiro.test(x)$p.value)
shares
swiss[shares < 0.01]
swiss[shares > 0.01]
shares
swiss[shares < 0.01]
swiss[shares < 0.05]
str(shares)
shares[1]
shares
shares[-1]
str(sapply(swiss, function(x) shapiro.test(x[-1])))
shares <- sapply(swiss, function(x) shapiro.test(x)$p.value)
shares <- sapply(swiss, function(x) shapiro.test(x[-1])$p.value)
shares
str(swiss)
shares <- sapply(swiss, function(x) shapiro.test(x[-2])$p.value)
shares
swiss[shares < 0.05]
shares
shares <- sapply(swiss, function(x) shapiro.test(x[-2])$p.value)
shares <- sapply(swiss[-1], function(x) shapiro.test(x)$p.value)
shares
swiss[shares < 0.05]
swi <- swiss[-1]
swi <- swi[shares < 0.05]
swi
cbind(swiss[1], swi)
?lm
swi <- cbind(swiss[1], swi)
lm(swi[1] ~ ., swi)
swi[1]
lm(swi[1] ~ ., swi)
lm(swi$Fertility ~ , swi)
lm(swi$Fertility ~ ., swi)
lm(swi[1,] ~ ., swi)
lm(swi[,1] ~ ., swi)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares < 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi)
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares < 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi)$p.value
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares < 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi)$coefficients
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares < 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
}
smart_lm(swiss)
lm(swi[ ,1] ~ ., swi[-1])
shares <- sapply(swiss[-1], function(x) shapiro.test(x)$p.value)
shares
shares <- sapply(swiss[-1], function(x) shapiro.test(x))
shares
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares > 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares > 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares > 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
#swi <- swi[shares > 0.05]
#swi <- cbind(x[1], swi)
#lm(swi[ ,1] ~ ., swi[-1])$coefficients
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
#swi <- swi[shares > 0.05]
#swi <- cbind(x[1], swi)
#lm(swi[ ,1] ~ ., swi[-1])$coefficients
shares
swi
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
#swi <- swi[shares > 0.05]
#swi <- cbind(x[1], swi)
#lm(swi[ ,1] ~ ., swi[-1])$coefficients
#shares
swi
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
#swi <- swi[shares > 0.05]
#swi <- cbind(x[1], swi)
#lm(swi[ ,1] ~ ., swi[-1])$coefficients
shares
#swi
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x, function(y) shapiro.test(y)$p.value)
swi <- x[-1]
#swi <- swi[shares > 0.05]
#swi <- cbind(x[1], swi)
#lm(swi[ ,1] ~ ., swi[-1])$coefficients
shares
swi
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x[-1], function(y) shapiro.test(y)$p.value)
swi <- x[-1]
#swi <- swi[shares > 0.05]
#swi <- cbind(x[1], swi)
#lm(swi[ ,1] ~ ., swi[-1])$coefficients
shares
swi
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x[-1], function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares > 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
#shares
#swi
}
smart_lm(swiss)
smart_lm <- function(x){
shares <- sapply(x[-1], function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares > 0.05]
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
#shares
#swi
}
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
smart_lm(test_data)
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
smart_lm(test_data)
smart_lm <- function(x){
shares <- sapply(x[-1], function(y) shapiro.test(y)$p.value)
swi <- x[-1]
swi <- swi[shares > 0.05]
if (ncol(swi) > 0){
swi <- cbind(x[1], swi)
lm(swi[ ,1] ~ ., swi[-1])$coefficients
#shares
#swi
}
else {
print("There are no normal variables in the data")
}
}
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
smart_lm(test_data)
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
smart_lm(test_data)
smart_lm(swiss)
?t.test
t.test(iris[, 1:4], mu=0)
iris[, 1:4]
lapply(iris[, 1:4], function(x) t.test(x, 0))
lapply(iris[, 1:4], function(x) t.test(x, mu = 0))
str(t.test(iris[, 1:4], mu=0))
lapply(iris[, 1:4], function(x) str(t.test(x, mu = 0)))
t.test(iris[,1])
t.test(iris[,1], mu = 4)
str(t.test(iris[,1], mu = 4))
t.test(iris[,1], mu = 4)$t
t.test(iris[,1], mu = 4)
t.test(iris[,1], mu = 4)
str(t.test(iris[,1], mu = 4))
t.test(iris[,1], mu = 4)
t.test(iris[,1], mu = 4)$statistic
str(t.test(iris[,1], mu = 4))
t.test(iris[,1], mu = 4)$parameter
str(t.test(iris[,1], mu = 4))
t.test(iris[,1], mu = 4)$p.value
lapply(iris[, 1:4], function(x) c(t.test(iris[,1], mu = 4)$statistic, t.test(iris[,1], mu = 4)$parameter, t.test(iris[,1], mu = 4)$p.value)))
lapply(iris[, 1:4], function(x) c(t.test(iris[,1], mu = 4)$statistic, t.test(iris[,1], mu = 4)$parameter, t.test(iris[,1], mu = 4)$p.value))
lapply(iris[, 1:4], function(x) c(t.test(iris[,1:4], mu = 4)$statistic, t.test(iris[,1:4], mu = 4)$parameter, t.test(iris[,1:4], mu = 4)$p.value))
one_sample_t <- function(test_data, general_mean){
lapply(test_data, function(x) c(t.test(test_data, mu = 4)$statistic, t.test(test_data, mu = 4)$parameter, t.test(test_data, mu = 4)$p.value))
}
one_sample_t(iris[, 1:4], 4)
one_sample_t <- function(test_data, general_mean){
lapply(test_data, function(x) c(t.test(test_data, mu = 4)$statistic, t.test(test_data, mu = 4)$parameter, t.test(test_data, mu = 4)$p.value))
}
one_sample_t(iris[, 1:4], 4)
one_sample_t <- function(test_data, general_mean){
lapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t(iris[, 1:4], 4)
test_data <- as.data.frame(list(V1 = c(28, 43, 24, 29, 26, 28, 56, 38, 41, 49), V2 = c("A", "A", "B", "A", "A", "A", "B", "A", "A", "A"), V3 = c(51, 39, 27, 48, 49, 36, 38, 21, 32, 38), V4 = c(27, 38, 33, 50, 50, 40, 25, 36, 49, 45), V5 = c(30, 32, 47, 47, 46, 40, 31, 37, 44, 37), V6 = c(34, 29, 51, 42, 30, 44, 50, 37, 54, 44), V7 = c(43, 33, 38, 42, 30, 35, 26, 40, 31, 33), V8 = c("A", "B", "B", "A", "B", "B", "B", "B", "B", "B")))
one_sample_t(test_data, 4)
test_data
sapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
one_sample_t <- function(test_data, general_mean){
sapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t(iris[, 1:4], 4)
one_sample_t <- function(test_data, general_mean){
lapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t <- function(test_data, general_mean){
test_data <- test_data(sapply(x, is.numeric))
lapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t(iris[, 1:4], 4)
one_sample_t <- function(test_data, general_mean){
test_data <- unlist(lapply(test_data, is.numeric))
lapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t(iris[, 1:4], 4)
test_data <- as.data.frame(list(V1 = c(28, 43, 24, 29, 26, 28, 56, 38, 41, 49), V2 = c("A", "A", "B", "A", "A", "A", "B", "A", "A", "A"), V3 = c(51, 39, 27, 48, 49, 36, 38, 21, 32, 38), V4 = c(27, 38, 33, 50, 50, 40, 25, 36, 49, 45), V5 = c(30, 32, 47, 47, 46, 40, 31, 37, 44, 37), V6 = c(34, 29, 51, 42, 30, 44, 50, 37, 54, 44), V7 = c(43, 33, 38, 42, 30, 35, 26, 40, 31, 33), V8 = c("A", "B", "B", "A", "B", "B", "B", "B", "B", "B")))
one_sample_t(test_data, 4)
test_data <- as.data.frame(list(V1 = c(28, 43, 24, 29, 26, 28, 56, 38, 41, 49), V2 = c("A", "A", "B", "A", "A", "A", "B", "A", "A", "A"), V3 = c(51, 39, 27, 48, 49, 36, 38, 21, 32, 38), V4 = c(27, 38, 33, 50, 50, 40, 25, 36, 49, 45), V5 = c(30, 32, 47, 47, 46, 40, 31, 37, 44, 37), V6 = c(34, 29, 51, 42, 30, 44, 50, 37, 54, 44), V7 = c(43, 33, 38, 42, 30, 35, 26, 40, 31, 33), V8 = c("A", "B", "B", "A", "B", "B", "B", "B", "B", "B")))
nnn <- unlist(lapply(test_data, is.numeric))
nnn
nnn <- test_data[unlist(lapply(test_data, is.numeric))]
nnn
one_sample_t <- function(test_data, general_mean){
test_data <- test_data[unlist(lapply(test_data, is.numeric))]
lapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t(iris[, 1:4], 4)
one_sample_t(test_data, 4)
test_data <- as.data.frame(list(V1 = c(33, 46, 40, 29, 37, 37, 44, 46, 41, 29), V2 = c(47, 38, 43, 34, 45, 39, 21, 49, 31, 26), V3 = c(38, 47, 39, 47, 44, 23, 41, 31, 47, 36), V4 = c("A", "B", "A", "B", "B", "A", "A", "A", "A", "A"), V5 = c(36, 35, 56, 25, 33, 26, 35, 38, 46, 36), V6 = c(39, 47, 45, 35, 53, 35, 24, 32, 38, 42), V7 = c(43, 35, 45, 37, 36, 35, 40, 36, 31, 52), V8 = c(34, 56, 44, 31, 38, 32, 29, 25, 24, 39), V9 = c(29, 21, 45, 27, 36, 43, 44, 26, 32, 35), V10 = c("B", "A", "A", "B", "B", "A", "B", "A", "A", "B"
)))
one_sample_t(test_data, 4)
list(V1 = c(15.48, 9, 0), V2 = c(10.36, 9, 0), V3 = c(13.06, 9, 0), V5 = c(10.38, 9, 0), V6 = c(12.27, 9, 0), V7 = c(16.46, 9, 0), V8 = c(9.29, 9, 0), V9 = c(10.23, 9, 0))
one_sample_t <- function(test_data, general_mean){
test_data <- test_data[unlist(lapply(test_data, is.numeric))]
lapply(test_data, function(x) c(t.test(test_data, mu = general_mean)$statistic, t.test(test_data, mu = general_mean)$parameter, t.test(test_data, mu = general_mean)$p.value))
}
one_sample_t(iris[, 1:4], 4)
test_data <- iris[, 1:4]
test_data <- iris[, 1:4]
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
test_data
test_data_num
one_sample_t <- function(test_data, general_mean){
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
lapply(test_data_num, function(x) c(t.test(test_data_num, mu = general_mean)$statistic, t.test(test_data_num, mu = general_mean)$parameter, t.test(test_data_num, mu = general_mean)$p.value))
}
one_sample_t <- function(test_data, general_mean){
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
return(lapply(test_data_num, function(x) c(t.test(test_data_num, mu = general_mean)$statistic, t.test(test_data_num, mu = general_mean)$parameter, t.test(test_data_num, mu = general_mean)$p.value)))
}
one_sample_t(iris[, 1:4], 4)
return(lapply(test_data_num, function(x) c(t.test(test_data_num, mu = general_mean)$statistic, t.test(test_data_num, mu = general_mean)$parameter, t.test(test_data_num, mu = general_mean)$p.value)))
one_sample_t <- function(test_data, general_mean){
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
return(lapply(test_data_num, function(x) c(t.test(test_data_num, mu = general_mean)$statistic, t.test(test_data_num, mu = general_mean)$parameter, t.test(test_data_num, mu = general_mean)$p.value)))
}
test_data <- iris[, 1:4]
one_sample_t(iris[, 1:4], 4)
test_data <- iris[, 1:4]
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
lapply(test_data_num, function(x) c(t.test(test_data_num, mu = general_mean)$statistic, t.test(test_data_num, mu = general_mean)$parameter, t.test(test_data_num, mu = general_mean)$p.value))
general_mean <- 4
lapply(test_data_num, function(x) c(t.test(test_data_num, mu = general_mean)$statistic, t.test(test_data_num, mu = general_mean)$parameter, t.test(test_data_num, mu = general_mean)$p.value))
lapply(test_data_num, function(x) c(t.test(x, mu = general_mean)$statistic, t.test(x, mu = general_mean)$parameter, t.test(x, mu = general_mean)$p.value))
one_sample_t <- function(test_data, general_mean){
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
return(lapply(test_data_num, function(x) c(t.test(x, mu = general_mean)$statistic, t.test(x, mu = general_mean)$parameter, t.test(x, mu = general_mean)$p.value)))
}
one_sample_t <- function(test_data, general_mean){
test_data_num <- test_data[unlist(lapply(test_data, is.numeric))]
return(lapply(test_data_num, function(x) c(t.test(x, mu = general_mean)$statistic, t.test(x, mu = general_mean)$parameter, t.test(x, mu = general_mean)$p.value)))
}
one_sample_t(iris[, 1:4], 4)
normality_tests <- lapply(iris[, 1:4], shapiro.test)
normality_tests
normality_tests$Sepal.Length
str(normality_tests)
lapply(normality_tests)
lapply(normality_tests, normality_tests$Sepal.Length)
normality_tests$p.value
normality_tests$Sepal.Width$p.value
lapply(normality_tests, [2])
lapply(normality_tests, ([2])
lapply(normality_tests, function(x) (x[2])
0
lapply(normality_tests, function(x) (x[2]))
lapply(normality_tests, function(x) (x$p.value))
lapply(normality_tests, function(x) x$p.value)
get_p_value <- function(test_list){
lapply(test_list, function(x) x$p.value)
}
