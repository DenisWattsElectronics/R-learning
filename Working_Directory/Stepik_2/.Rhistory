seq(stats::rnorm(20)) # effectively 'along'
stats::rnorm(20)
library(stats)
seq(rnorm(20))
seq(1, 9, by = 2)     # matches 'end'
seq(1, 9, by = pi)    # stays below 'end'
seq(1, 6, by = 3)
seq(1.575, 5.125, by = 0.05)
seq(17) # same as 1:17, or even better seq_len(17)
seq(1,length(diamonds[[1]]),2)
seq(1,nrow(diamonds),2)
seq(2,nrow(diamonds),2)
diamonds = as_data_frame(diamonds)
diamonds = data_frame(diamonds)
data_frame
tipple
library(dplyr)
diamonds = data_frame(diamonds)
diamonds = tibble(diamonds)
diamonds
diamonds[1]
diamonds[colnames()]
colnames(diamonds)
rownames(diamonds)
filter(diamonds, rownames(diamonds)%%2!=0)
filter(diamonds, rownames(diamonds)%%2+=0)
filter(diamonds, rownames(diamonds)%%2==0)
filter(diamonds, rownames(diamonds)%2==0)
rownames(diamonds)%%2
rownames(diamonds)/2
rownames(diamonds)
asinteger(rownames(diamonds))/2
int(rownames(diamonds))/2
rownames(diamonds)
filter(diamonds, carat > 0.3 | color == "J")
as_integer(rownames(diamonds))
as_integer(rownames(diamonds))
as.integer(rownames(diamonds))
filter(diamonds, as.integer(rownames(diamonds))%%2==0)
filter(diamonds, as.integer(rownames(diamonds))%%2!=0)
slice(diamonds, seq(1, nrow(diamonds), 2)
slice(diamonds, seq(1, nrow(diamonds), 2)
slice(diamonds, seq(1, nrow(diamonds), 2)
slice(diamonds, seq(1, nrow(diamonds), 2)
slice(diamonds, seq(1, nrow(diamonds), 2)
?as.integer)
slice(diamonds, seq(1, nrow(diamonds), 2))
slice
filter
arrange
mutate
my_df <- mtcars %>%
select(mpg, hp, am, vs)
my_df
my_df <- mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14 | hp > 100) %>%
arrange(-mpg) %>%
slice(1:10) %>%
rename(mpg = Miles per gallon,hp = Gross horsepower)
my_df <- mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14 | hp > 100) %>%
arrange(-mpg) %>%
slice(1:10) %>%
rename(mpg = "Miles per gallon", hp = "Gross horsepower")
my_df <- mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14 | hp > 100) %>%
arrange(-mpg) %>%
slice(1:10) %>%
rename("Miles per gallon" = mpg, "Gross horsepower" = hp)
my_df
my_df <- mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14 & hp > 100) %>%
arrange(-mpg) %>%
slice(1:10) %>%
rename("Miles per gallon" = mpg, "Gross horsepower" = hp)
my_df
all_to_factor <- function(x){
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
log_transform(my_data)
)
log_transform <- function(test_data){
mutate_each(test_data, funs((. - max(.))/(max(.) - min(.)) + 1))
return(mutate_each(test_data, funs(log(.))))
}
log_transform(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
my_data %>%
mutate(
x = x * 2,
)
my_df <- mtcars %>%
select(mpg, hp, am, vs) %>%
filter(mpg > 14 & hp > 100) %>%
arrange(-mpg) %>%
slice(1:10) %>%
rename("Miles per gallon" = mpg, "Gross horsepower" = hp)
library(dplyr)
my_data %>%
mutate(
x = x * 2,
)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
log_transform <- function(test_data){
mutate_each(test_data, funs((. - max(.))/(max(.) - min(.)) + 1))
return(mutate_each(test_data, funs(log(.))))
}
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
my_data %>%
mutate(
x = x * 2,
)
my_data %>%
mutate(
x = x * 2,
)
my_data %>%
mutate(
x2 = x * 2,
)
my_data %>%
mutate(
x2 = abs(x),
)
my_data %>%
mutate(
x = abs(x),
)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
log_transform <- function(test_data){
test_data %>%
mutate(
x = abs(x),
)
}
log_transform(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000),
f = factor(rep(1:2, 5000)))
my_data
log_transform <- function(test_data){
test_data %>%
mutate(
. = abs(.),
)
}
log_transform(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
log_transform <- function(test_data){
test_data %>%
mutate(
. = abs(.),
)
}
log_transform(my_data)
log_transform <- function(test_data){
test_data %>%
mutate(
. = abs(.),
)
}
log_transform(my_data)
log_transform <- function(test_data){
test_data %>%
mutate(
. = abs(.)
)
}
log_transform(my_data)
my_data
log_transform <- function(test_data){
test_data %>%
mutate(
test_data = abs(test_data)
)
}
log_transform(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
log_transform <- function(test_data){
test_data %>%
transmute(
test_data = abs(test_data)
)
}
log_transform(my_data)
log_transform <- function(test_data){
test_data %>%
transmute(
test_data = abs(test_data)
) %>%
transmute(
test_data = log(test_data)
)
}
log_transform(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data
log_transform <- function(test_data){
test_data %>%
transmute(
test_data = abs(test_data)
) %>%
transmute(
test_data = log(test_data)
)
}
log_transform(my_data)
log_transform(my_data)
log_transform <- function(test_data){
test_data %>%
transmute(
test_data$. = abs(test_data$.)
) %>%
transmute(
test_data = log(test_data)
)
}
my_data[1,]
my_data[,1]
my_data[:]
my_data[::]
my_data[,]
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = (test_data[,] - max(test_data[,])/(max(test_data[,]) - min(test_data[,])))
) %>%
transmute(
test_data = log(test_data)
)
}
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = (test_data[,] - max(test_data[,])/(max(test_data[,]) - min(test_data[,])))
)
}
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = ((test_data[,] - max(test_data[,])/(max(test_data[,]) - min(test_data[,]))))
)
}
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = (test_data[,] - max(test_data[,]))
)
}
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = (test_data[,] - max(test_data[,])),
)
}
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = (test_data[,] - max(test_data[,])),
)
}
log_transform <- function(test_data){
test_data %>%
transmute(
test_data[,] = test_data[,] - max(test_data[,])
)
}
all_to_factor(my_data)
all_to_factor <- function(x){
x %>% mutate_all(as.factor)
}
all_to_factor(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
all_to_factor <- function(x){
x %>% mutate_all(2 * .)
}
all_to_factor(my_data)
all_to_factor <- function(x){
x %>% mutate_all(2 * .)
}
all_to_factor(my_data)
all_to_factor <- function(x){
x %>% mutate_all(2 * x)
}
all_to_factor(my_data)
all_to_factor <- function(x){
mutate_all(x, lapply(x * 2))
}
all_to_factor(my_data)
all_to_factor <- function(x){
mutate_all(x, lapply(x, function(x) x * 2))
}
all_to_factor(my_data)
all_to_factor <- function(x){
mutate_all(x, lapply(x, function(x) =  x * 2))
}
all_to_factor(my_data)
all_to_factor <- function(x){
mutate_all(x, lapply(x, function(x) x * 2))
}
all_to_factor(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
all_to_factor <- function(x){
mutate_all(x, lapply(x, function(x) x * 2))
}
all_to_factor(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
all_to_factor <- function(x){
mutate_all(x, lapply(y, function(y) y * 2))
}
all_to_factor(my_data)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
all_to_factor <- function(x){
mutate_all(x, x[1] = 0)
}
all_to_factor(my_data)
library(scales)
my_data %>% mutate_if(is.numeric, log(rescale(x, to = c(1,2))))
log(rescale(x, to = c(1,2))
dfcd
rlang::last_error()
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, log(rescale(x, to = c(1,2))))
rlang::last_error()
my_data %>% mutate_if(is.numeric, rescale(x, to = c(1,2)))
my_data %>% mutate_if(is.numeric, x**2)
my_data %>% mutate_if(is.numeric, .**2)
my_data %>% mutate_if(is.numeric, ~.**2)
my_data %>% mutate_if(is.numeric, ~.**5)
my_data %>% mutate_if(is.numeric, ~.**5)
my_data %>% mutate_if(is.numeric, ~.**5)
my_data %>% mutate_if(is.numeric, log(rescale(x, to = c(1,2))))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data
my_data %>% mutate_if(is.numeric, ~.**2)
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, log(rescale(~., to = c(1,2))))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, log(rescale(~., to = c(1,2))))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, ~. - max(~.))
my_data %>% mutate_if(is.numeric, ~. - max(.))
my_data %>% mutate_if(is.numeric, (~. - max(.))/(max(.) - min(.)))
my_data
my_data %>% mutate_if(is.numeric, (~. - max(.))/(max(.) - min(.)))
my_data
my_data %>% mutate_if(is.numeric, (max(.) - min(.)))
my_data %>% mutate_if(is.numeric, (max(~.) - min(.)))
my_data %>% mutate_if(is.numeric, (~max(.) - min(.)))
my_data %>% mutate_if(is.numeric, (~max(.) - ~min(.)))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, (~max(.) - ~min(.)))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, (~. - max(.))/(~max(.) - min(.)))
my_data %>% mutate_if(is.numeric, (~. - max(.)))
my_data %>% mutate_if(is.numeric, (~. - max(.)))
my_data %>% mutate_if(is.numeric, (~max(.) - min(.)))
my_data %>% mutate_if(is.numeric, ~./(max(.) - min(.)))
my_data %>% mutate_if(is.numeric, (~. - max(.)))
my_data %>% mutate_if(is.numeric, ~./(max(.) - min(.)))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, (~. - min(.)))
my_data %>% mutate_if(is.numeric, ~./(max(.) - min(.)))
my_data %>% mutate_if(is.numeric, (~./(max(.) - min(.))+1))
my_data <- data_frame(x = rnorm(10000), y = rnorm(10000))
my_data %>% mutate_if(is.numeric, (~. - min(.)))
my_data %>% mutate_if(is.numeric, (~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
my_data %>% mutate_if(is.numeric, (~. - min(.)))
my_data %>% mutate_if(is.numeric, (~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a %>% mutate_if(is.numeric, (~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a %>% mutate_if(is.numeric, (~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a %>% mutate_if(is.numeric, (~./(max(.) - min(.))))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a %>% mutate_if(is.numeric, log(~./(max(.) - min(.))))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a %>% mutate_if(is.numeric, log(~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a %>% mutate_if(is.numeric, log(~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a
a %>% mutate_if(is.numeric, log(~./(max(.) - min(.))+1))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a
b <- a %>% mutate_if(is.numeric, ((~./(max(.) - min(.))+1)))
b
b %>% mutate_if(is.numeric, log(~.))
b %>% mutate_if(is.numeric, log(~))
b %>% mutate_if(is.numeric, log(.))
b %>% mutate_if(is.numeric, log(b))
log(b
b
b
log(b)
sapply(b, function(x) log(x))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
test_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
mutate_each(test_data, funs(ifelse(is.numeric(.), log(1 + (. - range(.)[1])/(range(.)[2] - range(.)[1])), .)))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
log(x[1,])
log(b[1,])
b
log(1.696970)
log(b[1,1])
sapply(b, function(x) b)
b
as.numeric(b)
sapply(b, function(x) b)
b %>% mutate_if(is.numeric, log(b))
b %>% mutate_if(is.numeric, log(.))
b %>% mutate_if(is.numeric, ~. = log(.))
b %>% mutate_if(is.numeric, log(~.))
b %>% mutate_if(is.numeric, log())
b %>% mutate_if(is.numeric, log(x[,1]))
b %>% mutate_if(is.numeric, log(x[1,1]))
mutate_each(b, funs(ifelse(is.numeric(.), log(.), .)))
mutate_each(b, funs(ifelse(is.numeric(.), sapply(log(.)), .)))
mutate_each(b, funs(ifelse(is.numeric(.), sapply(., log(.)), .)))
mutate_each(b, funs(ifelse(is.numeric(.), sapply(., function(.) log(.)), .)))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a
b <- a %>% mutate_if(is.numeric, ((~./(max(.) - min(.))+1)))
b
b %>% mutate_if(is.numeric, log(x[1,1]))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a
b <- a %>% mutate_if(is.numeric, ((~./(max(.) - min(.))+1)))
b
mutate_each(b, funs(ifelse(is.numeric(.), sapply(., function(.) log(.)), .)))
my_data <- as.data.frame(list(V1= c(1.5, -0.1, 2.5, -0.3, -0.8),
V2= c(-0.9, -0.3, -2.4, 0.0,  0.4),
V3= c(-2.8, -3.1, -1.8, 2.1, 1.9),
V4 =c('A', 'B', 'B', 'B', 'B')))
a <- my_data %>% mutate_if(is.numeric, (~. - min(.)))
a
b <- a %>% mutate_if(is.numeric, ((~./(max(.) - min(.))+1)))
b
test_data %>% mutate(across(where(is.numeric), ~   log(rescale(.x, to = c(1,2)))   ))
test_data <- as.data.frame(list(V1 = c("A", "B", "A", "B", "A"), V2 = c(0, 0.2, 1.6, 0.2, 0.2)))
test_data %>% mutate(across(where(is.numeric), ~   log(rescale(.x, to = c(1,2)))))
test_data %>% mutate_if(is.numeric, ~   log(rescale(.x, to = c(1,2)))))
test_data %>% mutate_if(is.numeric, ~   log(rescale(.x, to = c(1,2))))
